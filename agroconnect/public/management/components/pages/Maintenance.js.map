{"version":3,"file":"/management/components/pages/Maintenance.js","mappings":"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","sources":["webpack:///./resources/management/components/ lazy strict namespace object","webpack:///./resources/management/components/HeaderSidebar.js","webpack:///./resources/management/components/helpers/Dialog.js","webpack:///./resources/management/components/classes/Crop.js","webpack:///./resources/management/components/classes/CropVariety.js","webpack:///./resources/management/components/classes/Barangay.js","webpack:///./resources/management/components/classes/Farmer.js","webpack:///./resources/management/components/classes/Record.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 530;\nmodule.exports = webpackEmptyAsyncContext;","export let user;\nimport Dialog from \"./helpers/Dialog.js\";\n$(document).ready(function () {\n    $(\"body\").prepend(`\n        <!-- Loading screen -->\n        <div id=\"loadingScreen\" class=\"loading-overlay1\">\n            <div class=\"spinner-container1\">\n                <div class=\"spinner-grow\" role=\"status\"></div>\n                <div class=\"spinner-grow\" role=\"status\"></div>\n                <div class=\"spinner-grow\" role=\"status\"></div>\n                <p class=\"loading-message1\">Please wait while we load content...</p>\n            </div>\n        </div>\n    `);\n\n    function showLoadingScreen() {\n        $(\"#loadingScreen\").fadeIn();\n        // Optionally, set a timeout to auto-hide after a certain time\n        setTimeout(function () {\n            $(\"#loadingScreen\").fadeOut();\n        }, 2000); // 2 seconds delay\n    }\n\n    // Show loading screen on initial load\n    $(window).on(\"load\", function () {\n        showLoadingScreen();\n    });\n\n    // Show loading screen on URL change (for SPA)\n    $(window).on(\"popstate\", function () {\n        showLoadingScreen();\n    });\n\n    // If you're using a routing library, you might need to bind this to the route change event.\n    // Example for a hypothetical router event:\n    $(document).on(\"routeChange\", function () {\n        showLoadingScreen();\n    });\n\n    // Prevent loading screen on logout\n    $(\".logout a\").on(\"click\", function (event) {\n        // Prevent the loading screen from showing\n        event.stopPropagation(); // Prevents event from bubbling up\n        // Proceed with the logout process\n        // Optionally, you can perform additional actions here, like confirming logout, etc.\n    });\n\n    // Show loading screen only if it's not a logout action\n    $(document).on(\"click\", \"a\", function (event) {\n        if (!$(this).closest(\".logout\").length) {\n            showLoadingScreen();\n        }\n    });\n\n    async function getCsrfToken() {\n        return $('meta[name=\"csrf-token\"]').attr(\"content\");\n    }\n\n    async function requestCsrfCookie() {\n        return $.ajax({\n            url: \"/api/csrf-cookie\",\n            type: \"GET\",\n            xhrFields: {\n                withCredentials: true,\n            },\n        });\n    }\n\n    async function checkToken() {\n        const token = await getCsrfToken();\n        return $.ajax({\n            url: \"/api/check-user\",\n            type: \"GET\",\n            xhrFields: {\n                withCredentials: true,\n            },\n            headers: {\n                \"X-CSRF-TOKEN\": token,\n            },\n        });\n    }\n\n    async function initialize() {\n        try {\n            await requestCsrfCookie();\n            const response = await checkToken();\n\n            if (response.message !== \"Invalid Token\") {\n                user = response.user;\n                load();\n            } else {\n                window.location.href = \"/management-login\";\n            }\n        } catch (error) {\n            console.error(\"An error occurred:\", error);\n            window.location.href = \"/management-login\";\n        }\n    }\n\n    // Initialize CSRF token handling and token validation\n    initialize();\n\n    function load() {\n        // Set default hash to #dashboard if no hash is present\n        if (!window.location.hash) {\n            window.location.hash = \"#dashboard\";\n        }\n\n        // Function to load content from a JavaScript module file into main content area\n        async function loadContent(url) {\n            try {\n                // Dynamically import the module\n                const module = await import(url);\n\n                // Assuming your module has a default export or named exports\n                if (module.default) {\n                    module.default(); // Call the default export function if it exists\n                }\n            } catch (error) {\n                console.error(`Failed to load module from ${url}:`, error);\n            }\n        }\n\n        $(\"head\").prepend(`\n            <link rel=\"icon\" href=\"../../../img/logo.png\" type=\"image/png\">   \n        `);\n        $(\"body\").prepend(`\n            <div class=\"wrapper\">\n                <!-- Header -->\n                <div class=\"header\">\n                    <header class=\"header d-flex justify-content-between align-items-center\" style=\"background-color: #008000;\">\n                        <div class=\"header d-flex align-items-center p-2\">\n                            <!-- Burger Menu Icon for smaller screens -->\n                            <button class=\"navbar-toggler d-md-none mr-3\" type=\"button\" data-toggle=\"collapse\" data-target=\"#sidebar\" aria-controls=\"sidebar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                                <span class=\"navbar-toggler-icon\"><i class=\"fas fa-bars\"></i></span>\n                            </button>\n                            <img src=\"../img/logo.png\" alt=\"Logo\" class=\"header-logo d-none d-md-block\">\n                            <h3 id=\"appName\" class=\"pl-3 d-none d-md-block\">AgroConnect Cabuyao</h3> <!-- Hidden on small screens -->\n                        </div>\n                        <div class=\"pr-4 d-flex align-items-center\">\n                            <span class=\"username font-weight-bold\">${user.username}</span>\n                            <span class=\"user-icon ml-3\">\n                                <i class=\"fas fa-user-circle\"></i>\n                            </span>\n                        </div>\n                    </header>\n                </div>\n        \n                <!-- Sidebar and Content Wrapper -->\n                <div class=\"content-wrapper d-flex\">\n                    <!-- Sidebar -->\n                    <nav id=\"sidebar\" class=\"sidebar collapse\">\n                        <!-- Close button for small screens -->\n                        <button class=\"btn-close d-md-none\" aria-label=\"Close\" type=\"button\">\n                            <i class=\"fas fa-times\"></i>\n                        </button>\n                        <!-- Logo for small screens -->\n                        <div class=\"d-md-none text-center my-3\">\n                            <img src=\"../img/logo.png\" alt=\"Logo\" class=\"sidebar-logo\">\n                        </div>\n                        <div>\n                            <ul class=\"nav flex-column mt-4\" id=\"sidebar-links\">\n                                <!-- Links will be dynamically added here -->\n                            </ul>\n                            <ul class=\"nav flex-column logout\">\n                                <li class=\"nav-item mt-auto\">\n                                    <a class=\"nav-link\" href=\"#\">\n                                        <i class=\"fas fa-sign-out-alt\"></i>\n                                        Logout\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                    </nav>\n        \n                    <!-- Main Content Area -->\n                    <main role=\"main\" id=\"main-content\" class=\"content ml-sm-auto col-lg-10 pr-4\">\n                        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n                            <h1 class=\"h2\">Main Content</h1>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <p>Content area below the header and sidebar.</p>\n                            </div>\n                        </div>\n                    </main>\n                </div>\n            </div>\n            <script>\n                $(document).ready(function() {\n                     // Close sidebar when close button is clicked\n                    $('.btn-close').on('click', function() {\n                        $('#sidebar').collapse('hide');\n                    });\n\n                    // Close sidebar when any sidebar link is clicked\n                    $('#sidebar').on('click', '.nav-link', function() {\n                        $('#sidebar').collapse('hide');\n                    });\n                });\n            </script>\n        `);\n\n        // Determine which sidebar links to show based on user role\n        function initializeSidebar() {\n            var links = [\n                {\n                    id: \"dashboard-link\",\n                    href: \"#dashboard\",\n                    icon: \"fas fa-tachometer-alt\",\n                    text: \"Dashboard\",\n                },\n                {\n                    id: \"manage-users-link\",\n                    href: \"#manage-users\",\n                    icon: \"fas fa-users\",\n                    text: \"Manage Users\",\n                },\n                {\n                    id: \"maintenance-link\",\n                    href: \"#maintenance\",\n                    icon: \"fas fa-wrench\",\n                    text: \"Maintenance\",\n                },\n                {\n                    id: \"data-entries-link\",\n                    href: \"#data-entries\",\n                    icon: \"fas fa-database\",\n                    text: \"Data Entries\",\n                },\n                {\n                    id: \"concerns-link\",\n                    href: \"#concerns\",\n                    icon: \"fas fa-exclamation-triangle\",\n                    text: \"Concerns\",\n                },\n            ];\n\n            // Filter links based on user role\n            if (user.role === \"admin\") {\n                links.forEach((link) => {\n                    $(\"#sidebar-links\").append(`\n                        <li class=\"nav-item mt-3\">\n                            <a id=\"${link.id}\" class=\"nav-link\" href=\"${link.href}\">\n                                <i class=\"${link.icon}\"></i>\n                                ${link.text}\n                            </a>\n                        </li>\n                    `);\n                });\n            } else if (user.role === \"agriculturist\") {\n                const agriculturistLinks = [\n                    links[0], // Dashboard\n                    links[2], // Maintenance\n                    links[4], // Concerns\n                ];\n                agriculturistLinks.forEach((link) => {\n                    $(\"#sidebar-links\").append(`\n                        <li class=\"nav-item mt-3\">\n                            <a id=\"${link.id}\" class=\"nav-link\" href=\"${link.href}\">\n                                <i class=\"${link.icon}\"></i>\n                                ${link.text}\n                            </a>\n                        </li>\n                    `);\n                });\n            }\n        }\n        async function loadDefaultContent() {\n            const hash = window.location.hash;\n            let modulePath;\n\n            // Determine which module to load based on the URL hash\n            switch (hash) {\n                case \"#dashboard\":\n                    modulePath = \"./management/components/pages/Dashboard.js\";\n                    await loadContent(modulePath);\n                    setActiveLink(\"#dashboard-link\");\n                    break;\n                case \"#manage-users\":\n                    modulePath = \"../components/pages/ManageUsers.js\";\n                    await loadContent(modulePath);\n                    setActiveLink(\"#manage-users-link\");\n                    break;\n                case \"#maintenance\":\n                    modulePath = \"../components/pages/Maintenance.js\";\n                    await loadContent(modulePath);\n                    setActiveLink(\"#maintenance-link\");\n                    break;\n                case \"#data-entries\":\n                    modulePath = \"../components/pages/DataEntries.js\";\n                    await loadContent(modulePath);\n                    setActiveLink(\"#data-entries-link\");\n                    break;\n                case \"#concerns\":\n                    modulePath = \"../components/pages/Concerns.js\";\n                    await loadContent(modulePath);\n                    setActiveLink(\"#concerns-link\");\n                    break;\n                default:\n                    modulePath = \"./management/components/pages/Dashboard.js\";\n                    await loadContent(modulePath);\n                    setActiveLink(\"#dashboard-link\");\n                    break;\n            }\n        }\n\n        // Example function to set the active link\n        function setActiveLink(selector) {\n            // Remove active class from all links\n            $(\".nav-link\").removeClass(\"active\");\n            // Add active class to the selected link\n            $(selector).addClass(\"active\");\n        }\n\n        // Call loadDefaultContent when the page loads\n        $(document).ready(function () {\n            loadDefaultContent();\n\n            // Also handle hash change if user navigates using browser history\n            $(window).on(\"hashchange\", function () {\n                loadDefaultContent();\n            });\n        });\n\n        // Initialize sidebar based on user role\n        initializeSidebar();\n\n        // Logout button click event\n        $(\".logout a\").on(\"click\", async function (event) {\n            event.preventDefault(); // Prevent the default link behavior\n            event.stopPropagation(); // Prevents event from bubbling up\n            // Show confirmation dialog\n            const res = await Dialog.confirmDialog(\n                \"Logout\",\n                \"Are you sure you want to logout?\"\n            );\n            if (res.operation === Dialog.OK_OPTION) {\n                // Proceed with logout\n                $.ajax({\n                    url: \"/api/logout\", // Route to handle logout\n                    type: \"POST\",\n                    xhrFields: {\n                        withCredentials: true, // Ensure cookies are sent with the request\n                    },\n                    headers: {\n                        \"X-CSRF-TOKEN\": getCsrfToken(), // Include CSRF token if required\n                    },\n                    success: function (response) {\n                        if (response.success) {\n                            toastr.success(\n                                \"You have been logged out.\",\n                                \"Success\",\n                                {\n                                    timeOut: 5000, // 5 seconds\n                                    positionClass: \"toast-top-center\",\n                                    toastClass: \"toast-success-custom\",\n                                }\n                            );\n                            // Redirect after a short delay to let the toast show\n                            setTimeout(function () {\n                                window.location.href = \"/management-login\"; // Redirect to login page\n                            }, 1500); // Adjust delay as needed\n                        } else {\n                            toastr.error(\n                                \"Logout failed: \" + response.message,\n                                \"Error\",\n                                {\n                                    timeOut: 5000, // 5 seconds\n                                    positionClass: \"toast-center-center\",\n                                    toastClass: \"toast-error\", // Custom error color\n                                }\n                            );\n                        }\n                    },\n                    error: function (xhr) {\n                        toastr.error(\n                            \"Logout failed: \" + xhr.responseJSON.message,\n                            \"Error\",\n                            {\n                                timeOut: 5000, // 5 seconds\n                                positionClass: \"toast-center-center\",\n                                toastClass: \"toast-error\", // Custom error color\n                            }\n                        );\n                    },\n                });\n            }\n        });\n    }\n});\n","// Class Dialog\nclass Dialog {\n    /**\n     * State of the Input Dialog OK (1)\n     */\n    static OK_OPTION = 1;\n    /**\n     * State of the Input Dialog CANCEL (0)\n     */\n    static CANCEL_OPTION = 0;\n\n    /**\n     * method of Dialog Class that allows user input\n     * @param {innerText} textTitle Title of the dialog (only plain text)\n     * @param {innerHTML} textMessage Message of the dialog for user input (allows element tags)\n     * @returns data of dialog upon resolve().\n     */\n    static async confirmDialog(textTitle, textMessage) {\n        // create elemeents\n        const inputDialog = document.createElement(\"dialog\");\n        const title = document.createElement(\"h4\");\n        const message = document.createElement(\"div\");\n        const divButtons = document.createElement(\"div\");\n        const btnOk = document.createElement(\"button\");\n        const btnCancel = document.createElement(\"button\");\n        // add attributes\n        inputDialog.setAttribute(\"id\", \"inputDialog\");\n        title.setAttribute(\"id\", \"title\");\n        message.setAttribute(\"id\", \"message\");\n        divButtons.setAttribute(\"id\", \"divButtons\");\n        btnOk.setAttribute(\"id\", \"btnOk\");\n        btnOk.innerText = \"OK\";\n        btnCancel.setAttribute(\"id\", \"btnCancel\");\n        btnCancel.innerText = \"Cancel\";\n\n        // append the elements\n        divButtons.append(btnOk, btnCancel);\n        inputDialog.append(title, message, divButtons);\n        $(\"body\").prepend(inputDialog);\n\n        /**\n         * dialogData       =   contains the data of the input dialog\n         *\n         * output           =   output of the dialog (input). null is default value\n         * outputLength     =   length of the output\n         * operation        =   operations of the buttons in dialog. 0 is default value\n         *                      1 - OK\n         *                      0 - CANCEL\n         */\n        const dialogData = {\n            operation: 0,\n        };\n\n        return new Promise((resolve) => {\n            if (!inputDialog.open) {\n                // Display the modal with the message\n                inputDialog.showModal();\n\n                // show the message\n                title.innerText = textTitle;\n                message.innerHTML = textMessage;\n                btnOk.addEventListener(\"click\", () => {\n                    // close the dialog\n                    inputDialog.close();\n\n                    // remove the element\n                    $(inputDialog).remove();\n\n                    dialogData.operation = 1;\n\n                    // Resolve the promise to indicate that the modal has been closed\n                    resolve(dialogData);\n                });\n\n                btnCancel.addEventListener(\"click\", () => {\n                    // close the dialog\n                    inputDialog.close();\n\n                    // remove the element\n                    $(inputDialog).remove();\n\n                    // update the data of dialog\n                    dialogData.operation = 0;\n\n                    // Resolve the promise to indicate that the modal has been closed\n                    resolve(dialogData);\n                });\n            }\n        });\n    }\n\n    /**\n     * Method of Dialog Class that allows user to change password\n     * @param {innerText} textTitle Title of the dialog (only plain text)\n     * @param {innerHTML} textMessage Message of the dialog (allows element tags)\n     * @returns {Promise} Promise that resolves with the dialog data including the new password if OK is clicked.\n     */\n    static async changePasswordDialog(textTitle, textMessage) {\n        // Create elements\n        const inputDialog = document.createElement(\"dialog\");\n        const title = document.createElement(\"h4\");\n        const message = document.createElement(\"div\");\n        const form = document.createElement(\"form\");\n        const newPasswordInput = document.createElement(\"input\");\n        const confirmPasswordInput = document.createElement(\"input\");\n        const divButtons = document.createElement(\"div\");\n        const btnSave = document.createElement(\"button\");\n        const btnCancel = document.createElement(\"button\");\n        const errorMessage = document.createElement(\"div\");\n\n        // Add attributes and text\n        newPasswordInput.setAttribute(\"class\", \"form-control mb-3\");\n        confirmPasswordInput.setAttribute(\"class\", \"form-control\");\n        inputDialog.setAttribute(\"id\", \"inputDialog\");\n        title.setAttribute(\"id\", \"title\");\n        message.setAttribute(\"id\", \"message\");\n        divButtons.setAttribute(\"id\", \"divButtons\");\n        btnSave.setAttribute(\"id\", \"btnSave\");\n        btnSave.innerText = \"Save\";\n        btnCancel.setAttribute(\"id\", \"btnCancel\");\n        btnCancel.innerText = \"Cancel\";\n\n        newPasswordInput.setAttribute(\"type\", \"password\");\n        newPasswordInput.setAttribute(\"placeholder\", \"New Password\");\n        newPasswordInput.setAttribute(\"id\", \"newPassword\");\n\n        confirmPasswordInput.setAttribute(\"type\", \"password\");\n        confirmPasswordInput.setAttribute(\"placeholder\", \"Confirm Password\");\n        confirmPasswordInput.setAttribute(\"id\", \"confirmPassword\");\n\n        errorMessage.setAttribute(\"id\", \"errorMessage\");\n        errorMessage.style.color = \"red\";\n\n        // Append elements\n        form.append(newPasswordInput, confirmPasswordInput, errorMessage);\n        divButtons.append(btnSave, btnCancel);\n        inputDialog.append(title, message, form, divButtons);\n        document.body.prepend(inputDialog);\n\n        const dialogData = {\n            operation: 0,\n            newPassword: null,\n        };\n\n        return new Promise((resolve) => {\n            // Display the modal with the message\n            inputDialog.showModal();\n\n            // Show the message\n            title.innerText = textTitle;\n            message.innerHTML = textMessage;\n\n            btnSave.addEventListener(\"click\", () => {\n                const newPassword = newPasswordInput.value.trim();\n                const confirmPassword = confirmPasswordInput.value.trim();\n\n                if (newPassword === confirmPassword) {\n                    // Close the dialog\n                    inputDialog.close();\n                    $(inputDialog).remove();\n\n                    dialogData.operation = 1;\n                    dialogData.newPassword = newPassword;\n\n                    // Resolve the promise to indicate that the modal has been closed\n                    resolve(dialogData);\n                } else {\n                    // Show error message\n                    errorMessage.innerText =\n                        \"Passwords do not match. Please try again.\";\n                }\n            });\n\n            btnCancel.addEventListener(\"click\", () => {\n                // Close the dialog\n                inputDialog.close();\n                $(inputDialog).remove();\n\n                // Resolve the promise to indicate that the modal has been closed\n                resolve(dialogData);\n            });\n\n            newPasswordInput.addEventListener(\"input\", validatePasswords);\n            confirmPasswordInput.addEventListener(\"input\", validatePasswords);\n\n            function validatePasswords() {\n                const newPassword = newPasswordInput.value.trim();\n                const confirmPassword = confirmPasswordInput.value.trim();\n\n                // Regular expression to check if the password contains both letters and numbers\n                const hasLettersAndNumbers =\n                    /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n\n                if (\n                    newPassword !== confirmPassword &&\n                    confirmPassword.length > 0\n                ) {\n                    errorMessage.innerText = \"Passwords do not match.\";\n                } else if (!hasLettersAndNumbers.test(newPassword)) {\n                    errorMessage.innerText =\n                        \"Password must be at least 8 characters \\nand include both letters and numbers.\";\n                } else {\n                    errorMessage.innerText = \"\";\n                }\n            }\n        });\n    }\n\n    static async showCropModal(\n        cropImg,\n        description,\n        cropTitle,\n        varietyDetails\n    ) {\n        // Create modal\n        const modal = document.createElement(\"dialog\");\n        modal.setAttribute(\"id\", \"messageDialog\");\n        modal.style.width = \"700px\"; // Adjust as needed\n        modal.style.padding = \"20px\";\n        modal.style.textAlign = \"center\";\n        modal.style.borderRadius = \"0.5rem\"; // Rounded corners\n\n        // Sort varietyDetails by totalAreaPlanted\n        varietyDetails.sort((a, b) => b.totalAreaPlanted - a.totalAreaPlanted);\n\n        // Create innerHTML for modal content\n        modal.innerHTML = `\n        <div class=\"container-fluid\">\n            <ul class=\"nav nav-tabs d-flex justify-content-around w-100\" style=\"border-bottom: 2px solid #007bff;\">\n                <li class=\"nav-item w-50\">\n                    <a class=\"nav-link active bg-white text-center w-100\" id=\"cropInfoTab\" href=\"#\" style=\"font-weight: bold; color: #28a745;\">Crop Information</a>\n                </li>\n                <li class=\"nav-item w-50\">\n                    <a class=\"nav-link bg-white text-center w-100\" id=\"varietyTab\" href=\"#\" style=\"font-weight: bold; color: #6c757d;\">Variety</a>\n                </li>\n            </ul>\n            <div class=\"tab-content\">\n                <div class=\"tab-pane fade show active bg-transparent\" id=\"cropInfoContent\" style=\"text-align: justify; font-size: 0.9rem; margin-top: 15px;\">\n                    <div class=\"text-center\">\n                        <div style=\"background-color: #C9AF94; color: white; padding: 10px; border-radius: 8px; font-weight: bold; font-size: 1.5rem; margin-bottom: 15px;\">\n                            ${cropTitle}\n                        </div>\n                        <img id=\"cropImg\" src=\"${cropImg}\" alt=\"Crop Image\" class=\"img-fluid border border-primary rounded\" style=\"width: 30rem; height: auto; margin-bottom: 10px;\">\n                    </div>\n    \n                    <div class=\"text-dark mt-2\">${description}</div>\n                </div>\n                <div class=\"tab-pane fade bg-transparent\" id=\"varietyContent\" style=\"text-align: justify; font-size: 0.9rem; color: #333;\">\n                    <div class=\"accordion\" id=\"varietyAccordion\">\n                        ${varietyDetails\n                            .map(\n                                (variety, index) => `\n                        <div class=\"accordion-item\">\n                            <h2 class=\"accordion-header\" id=\"heading${index}\">\n                                <button class=\"bg-success accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapse${index}\" aria-expanded=\"false\" aria-controls=\"collapse${index}\">\n                                    ${variety.varietyName} (Total Area Planted: ${variety.totalAreaPlanted})\n                                </button>\n                            </h2>\n                            <div id=\"collapse${index}\" class=\"accordion-collapse collapse\" aria-labelledby=\"heading${index}\" data-bs-parent=\"#varietyAccordion\">\n                                <div class=\"accordion-body\">\n                                    <img src=\"${variety.cropImg}\" alt=\"${variety.varietyName} Image\" class=\"img-fluid border border-primary rounded\" style=\"width: 20rem; height: auto; margin-bottom: 10px;\">\n                                    <p><strong>Characteristics:</strong></p>\n                                    <p><strong>Color:</strong> ${variety.color}</p>\n                                    <p><strong>Size:</strong> ${variety.size}</p>\n                                    <p><strong>Flavor:</strong> ${variety.flavor}</p>\n                                    <p><strong>Growth Conditions:</strong> ${variety.growthConditions}</p>\n                                    <p><strong>Pest/Disease Resistance:</strong> ${variety.pestDiseaseResistance}</p>\n                                    <p><strong>Recommended Practices:</strong> ${variety.recommendedPractices}</p>\n                                </div>\n                            </div>\n                        </div>\n                        `\n                            )\n                            .join(\"\")}\n                    </div>\n                </div>\n            </div>\n            <div class=\"d-flex justify-content-center mt-3\">\n                <button id=\"btnClose\" class=\"btn btn-danger\" style=\"font-weight: bold;\">Close</button>\n            </div>\n        </div>\n        `;\n\n        // Append modal to document body\n        document.body.append(modal);\n\n        // Create dialogData object\n        const dialogData = {\n            operation: 0, // Default operation\n        };\n\n        return new Promise((resolve) => {\n            if (!modal.open) {\n                // Display the modal\n                modal.showModal();\n\n                // Tab click event\n                const cropInfoContent = modal.querySelector(\"#cropInfoContent\");\n                const varietyContent = modal.querySelector(\"#varietyContent\");\n\n                modal\n                    .querySelector(\".nav-tabs\")\n                    .addEventListener(\"click\", (event) => {\n                        const target = event.target;\n                        if (target.id === \"cropInfoTab\") {\n                            cropInfoContent.classList.add(\"show\", \"active\");\n                            varietyContent.classList.remove(\"show\", \"active\");\n                            target.style.color = \"#28a745\"; // Active tab color\n                            modal.querySelector(\"#varietyTab\").style.color =\n                                \"#6c757d\"; // Inactive tab color\n                        } else if (target.id === \"varietyTab\") {\n                            varietyContent.classList.add(\"show\", \"active\");\n                            cropInfoContent.classList.remove(\"show\", \"active\");\n                            target.style.color = \"#28a745\"; // Active tab color\n                            modal.querySelector(\"#cropInfoTab\").style.color =\n                                \"#6c757d\"; // Inactive tab color\n                        }\n                    });\n\n                modal\n                    .querySelector(\"#btnClose\")\n                    .addEventListener(\"click\", () => {\n                        // Close the modal\n                        modal.close();\n                        // Remove the modal from the DOM\n                        modal.remove();\n                        // Update dialogData to indicate close operation\n                        dialogData.operation = 1;\n                        // Resolve the promise with dialogData\n                        resolve(dialogData);\n                    });\n            }\n        });\n    }\n\n    static async downloadDialog() {\n        // Create elements\n        const inputDialog = document.createElement(\"dialog\");\n        const modalContent = document.createElement(\"div\");\n        const title = document.createElement(\"h5\");\n        const divButtons = document.createElement(\"div\");\n        const btnCSV = document.createElement(\"button\");\n        const btnExcel = document.createElement(\"button\");\n        const btnPDF = document.createElement(\"button\");\n        const closeButton = document.createElement(\"button\");\n\n        // Set attributes and text\n        inputDialog.setAttribute(\"id\", \"downloadModal\");\n        inputDialog.setAttribute(\"role\", \"dialog\");\n        inputDialog.setAttribute(\"aria-labelledby\", \"downloadModalLabel\");\n        inputDialog.style.padding = \"20px\";\n        inputDialog.style.borderRadius = \"8px\";\n        inputDialog.style.maxWidth = \"400px\";\n        inputDialog.style.boxShadow = \"0 4px 10px rgba(0, 0, 0, 0.1)\";\n\n        // Modal header\n        title.className = \"modal-title text-center mb-4\";\n        title.id = \"downloadModalLabel\";\n        title.innerText = \"Download Options\";\n\n        // Close button\n        closeButton.type = \"button\";\n        closeButton.innerText = \"Close\";\n        closeButton.className = \"dialog-close btn btn-secondary\";\n        closeButton.style.width = \"100%\";\n        closeButton.addEventListener(\"click\", () => {\n            inputDialog.close();\n        });\n\n        // Modal buttons with Font Awesome icons\n        btnCSV.className = \"btn btn-primary mb-3\";\n        btnCSV.innerHTML = '<i class=\"fas fa-file-csv\"></i> Download CSV';\n        btnCSV.setAttribute(\"data-format\", \"csv\");\n        btnCSV.style.width = \"100%\";\n\n        btnExcel.className = \"btn btn-success mb-3\";\n        btnExcel.innerHTML = '<i class=\"fas fa-file-excel\"></i> Download Excel';\n        btnExcel.setAttribute(\"data-format\", \"xlsx\");\n        btnExcel.style.width = \"100%\";\n\n        btnPDF.className = \"btn btn-danger mb-3\";\n        btnPDF.innerHTML = '<i class=\"fas fa-file-pdf\"></i> Download PDF';\n        btnPDF.setAttribute(\"data-format\", \"pdf\");\n        btnPDF.style.width = \"100%\";\n\n        // Add event listeners for buttons\n        let resolvePromise;\n        const formatPromise = new Promise((resolve) => {\n            resolvePromise = resolve;\n        });\n\n        [btnCSV, btnExcel, btnPDF].forEach((button) => {\n            button.addEventListener(\"click\", (event) => {\n                const format = event.currentTarget.getAttribute(\"data-format\");\n                if (resolvePromise) {\n                    resolvePromise(format); // Resolve the promise with the selected format\n                }\n                inputDialog.close(); // Close the dialog after selection\n            });\n        });\n\n        // Style and structure modal body\n        divButtons.className = \"d-grid gap-3\"; // Bootstrap's grid gap class for spacing\n        divButtons.append(btnCSV, btnExcel, btnPDF, closeButton);\n\n        // Assemble modal content\n        modalContent.className = \"text-center\";\n        modalContent.append(title, divButtons);\n\n        inputDialog.appendChild(modalContent);\n        document.body.appendChild(inputDialog);\n\n        // Show the dialog\n        inputDialog.showModal();\n\n        // Return the promise that resolves with the selected format\n        return formatPromise;\n    }\n\n    static async showInfoModal(htmlScript) {\n        // Create elements\n        const modal = document.createElement(\"dialog\");\n        const container = document.createElement(\"div\");\n        const btnClose = document.createElement(\"button\");\n        const btnWrapper = document.createElement(\"div\"); // Wrapper for the button\n\n        // Add attributes\n        modal.setAttribute(\"id\", \"messageDialog\");\n        btnClose.setAttribute(\"id\", \"btnClose\");\n        btnClose.innerText = \"Close\";\n\n        // Style the modal\n        modal.style.maxWidth = \"1000px\"; // Adjust as needed\n        modal.style.padding = \"20px\";\n        modal.style.fontSize = \"1em\";\n        modal.style.textAlign = \"justify\";\n        modal.style.margin = \"20px\"; // Margin around the modal\n\n        // Style the container\n        container.style.display = \"flex\";\n        container.style.flexDirection = \"column\"; // Stack content and button\n        container.style.alignItems = \"center\"; // Center items horizontally\n        container.style.gap = \"20px\"; // Space between content and button\n        container.style.margin = \"20px\"; // Margin around the content\n\n        // Render the HTML script inside the container\n        container.innerHTML = htmlScript;\n\n        // Style the button wrapper\n        btnWrapper.style.display = \"flex\";\n        btnWrapper.style.justifyContent = \"flex-end\"; // Align items to the right\n\n        // Append content and button\n        btnWrapper.append(btnClose);\n        container.append(btnWrapper);\n        modal.append(container);\n        document.body.append(modal);\n\n        // Create dialogData object\n        const dialogData = {\n            operation: 0, // Default operation\n        };\n\n        return new Promise((resolve) => {\n            if (!modal.open) {\n                // Display the modal\n                modal.showModal();\n\n                btnClose.addEventListener(\"click\", () => {\n                    // Close the modal\n                    modal.close();\n\n                    // Remove the element\n                    modal.remove();\n\n                    // Update dialogData to indicate close operation\n                    dialogData.operation = 1;\n\n                    // Resolve the promise with dialogData\n                    resolve(dialogData);\n                });\n            }\n        });\n    }\n}\n\nexport default Dialog;\n\n// modal for download, concern, info\n","import Dialog from \"../helpers/Dialog.js\";\n\n// Crop.js\nlet crops = [];\n\nclass Crop {\n    constructor(\n        cropId,\n        cropName,\n        cropType,\n        scientificName,\n        plantingSeason,\n        growthDuration,\n        unit,\n        weight,\n        cropImg\n    ) {\n        this.cropId = cropId;\n        this.cropName = cropName;\n        this.cropType = cropType;\n        this.scientificName = scientificName; // Added scientific name\n        this.plantingSeason = plantingSeason; // Added planting season\n        this.growthDuration = growthDuration; // Added growth duration in days\n        this.unit = unit; // Added unit (e.g., kg, lbs)\n        this.weight = weight; // Added weight\n        this.cropImg = cropImg;\n    }\n\n    async createCrop(crop) {\n        // Check for duplicates based on both cropName and variety\n        const existingCrop = crops.find((c) => c.cropName === crop.cropName);\n        if (existingCrop) {\n            alert(\"Crop with the same name already exists\");\n            return;\n        }\n\n        console.log(crop.unit);\n\n        // Show the static uploading message\n        $(\"#progressMessage\").text(\"Uploading...\");\n        $(\"#loader\").show(); // Show the loader\n        $(\"body\").addClass(\"no-scroll\"); // Optional: Add a class to disable scrolling\n\n        try {\n            await $.ajax({\n                url: \"/api/crops\",\n                type: \"POST\",\n                contentType: \"application/json\",\n                data: JSON.stringify(crop),\n            });\n            console.log(\"Success:\", crop);\n            toastr.success(\"Crop added successfully!\", \"Success\", {\n                timeOut: 5000, // 5 seconds\n                positionClass: \"toast-top-center\",\n                toastClass: \"toast-success-custom\",\n            });\n        } catch (error) {\n            console.error(\"Error:\", error);\n            toastr.error(\"Failed to add crop. Please try again.\", \"Error\", {\n                timeOut: 5000, // 5 seconds\n                positionClass: \"toast-top-center\",\n                toastClass: \"toast-error-custom\",\n            });\n        } finally {\n            // Hide the loader and re-enable user interaction\n            $(\"#loader\").hide();\n            $(\"body\").removeClass(\"no-scroll\"); // Remove the class to re-enable scrolling\n            $(\"#progressMessage\").text(\"\"); // Clear the progress message\n        }\n    }\n\n    updateCrop(updatedCrop) {\n        // Check for duplicates based on both cropName and variety, excluding the current crop\n        const existingCrop = crops.find(\n            (c) =>\n                c.cropName === updatedCrop.cropName &&\n                c.cropId !== updatedCrop.cropId\n        );\n        if (existingCrop) {\n            alert(\"Crop with the same name already exists\");\n            return;\n        }\n\n        // Update the crop in the local crops array\n        crops = crops.map((crop) =>\n            crop.cropId === updatedCrop.cropId\n                ? { ...crop, ...updatedCrop }\n                : crop\n        );\n\n        fetch(`/api/crops/${updatedCrop.cropId}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(updatedCrop),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(\"Success:\", data);\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n\n    removeCrop(cropId) {\n        fetch(`/api/crops/${cropId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((response) => {\n                if (response.status === 204) {\n                    crops = crops.filter((crop) => crop.cropId !== cropId);\n                    console.log(`Crop with ID ${cropId} deleted.`);\n                } else if (response.status === 404) {\n                    console.error(`Crop with ID ${cropId} not found.`);\n                } else {\n                    console.error(`Failed to delete crop with ID ${cropId}.`);\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n}\n\nfunction getCrop() {\n    // Fetch crops from Laravel backend\n    $.ajaxSetup({\n        headers: {\n            \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr(\"content\"),\n        },\n    });\n\n    // Fetch crops from Laravel backend\n    $.ajax({\n        url: \"/api/crops\", // Endpoint to fetch crops\n        method: \"GET\",\n        success: function (response) {\n            // Assuming response is an array of crops\n            let crop = response;\n\n            crops = crop;\n            console.log(crops);\n        },\n        error: function (xhr, status, error) {\n            console.error(\"Error fetching crops:\", error);\n        },\n    });\n}\n\ngetCrop();\n\nfunction searchCrop(cropName) {\n    const foundCrops = crops.filter((crop) =>\n        crop.cropName.toLowerCase().includes(cropName.toLowerCase())\n    );\n    return foundCrops;\n}\n\nfunction initializeMethodsCrop() {\n    var selectedRow = null;\n    var pageSize = 5;\n    var currentPage = 1;\n    var isEdit = false;\n    var crop = null;\n\n    async function displayCrops(cropName = null) {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n\n        $(\"#cropTableBody\").empty();\n\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = startIndex + pageSize;\n\n        if (cropName) {\n            const foundCrops = searchCrop(cropName);\n            if (foundCrops.length > 0) {\n                foundCrops.forEach((crop) => {\n                    $(\"#cropTableBody\").append(`\n                        <tr data-index=${crop.cropId} class=\"text-center\">\n                            <td style=\"display: none;\">${crop.cropId}</td>\n                            <td><img src=\"${crop.cropImg}\" alt=\"${crop.cropName}\" class=\"img-thumbnail\" width=\"50\" height=\"50\"></td>\n                            <td>${crop.cropName}</td>\n                            <td>${crop.cropType}</td>\n                            <td>${crop.scientificName}</td>\n                            <td class=\"crop-cell\" title=\"${crop.plantingSeason}\">${crop.plantingSeason}</td>\n                            <td class=\"crop-cell\" title=\"${crop.growthDuration}\">${crop.growthDuration}</td>\n                            <td>${crop.unit}</td>\n                            <td>${crop.weight}</td>\n                        </tr>\n                    `);\n                });\n            } else {\n                $(\"#cropTableBody\").append(`\n                    <tr>\n                        <td colspan=\"9\">Crop not found!</td>\n                    </tr>\n                `);\n            }\n        } else {\n            for (var i = startIndex; i < endIndex; i++) {\n                if (i >= crops.length) {\n                    break;\n                }\n                var crop = crops[i];\n                $(\"#cropTableBody\").append(`\n                    <tr data-index=${crop.cropId} class=\"text-center\">\n                        <td style=\"display: none;\">${crop.cropId}</td>\n                        <td><img src=\"${crop.cropImg}\" alt=\"${crop.cropName}\" class=\"img-thumbnail\" width=\"50\" height=\"50\"></td>\n                        <td>${crop.cropName}</td>\n                        <td>${crop.cropType}</td>\n                        <td>${crop.scientificName}</td>\n                        <td class=\"crop-cell\" title=\"${crop.plantingSeason}\">${crop.plantingSeason}</td>\n                        <td class=\"crop-cell\" title=\"${crop.growthDuration}\">${crop.growthDuration}</td>\n                        <td>${crop.unit}</td>\n                        <td>${crop.weight}</td>\n                    </tr>\n                `);\n            }\n        }\n    }\n\n    // Display initial crops\n    displayCrops();\n\n    $(\"#search\").on(\"input\", function () {\n        let cropName = $(\"#search\").val();\n        displayCrops(cropName);\n    });\n\n    // Pagination: Previous button click handler\n    $(\"#prevBtn\").click(function () {\n        if (currentPage > 1) {\n            currentPage--;\n            displayCrops();\n        }\n    });\n\n    // Pagination: Next button click handler\n    $(\"#nextBtn\").click(function () {\n        var totalPages = Math.ceil(crops.length / pageSize);\n        if (currentPage < totalPages) {\n            currentPage++;\n            displayCrops();\n        }\n    });\n\n    let prevCropImg = \"\";\n\n    $(\"#submitBtn\").click(function (event) {\n        event.preventDefault();\n\n        var cropId = Number($(\"#cropId\").val());\n        var cropName = $(\"#cropName\").val();\n        var cropType = $(\"#cropType\").val();\n        var scientificName = $(\"#scientificName\").val();\n        var plantingSeason = $(\"#plantingSeason\").val();\n        var growthDuration = $(\"#growthDuration\").val();\n        var unit = $(\"#unit\").val();\n        var weight = $(\"#weight\").val();\n\n        // Get the file input element and the selected file\n        var cropImgFile = document.getElementById(\"cropImg\").files[0];\n        var cropImgBase64 = null; // Initialize as null\n\n        console.log(selectedRow);\n        if (cropImgFile) {\n            var reader = new FileReader();\n            reader.onloadend = function () {\n                var img = new Image();\n                img.src = reader.result;\n\n                img.onload = function () {\n                    // Create a canvas to draw the image on\n                    var canvas = document.createElement(\"canvas\");\n                    var ctx = canvas.getContext(\"2d\");\n\n                    // Set the canvas size to the image size\n                    canvas.width = img.width;\n                    canvas.height = img.height;\n\n                    // Draw the image on the canvas\n                    ctx.drawImage(img, 0, 0);\n\n                    // Convert the canvas image to WebP format (quality can be adjusted)\n                    cropImgBase64 = canvas.toDataURL(\"image/webp\", 0.8); // 0.8 is the quality factor\n\n                    // Create the Crop object with the WebP base64 image string\n                    let crop = new Crop(\n                        cropId,\n                        cropName,\n                        cropType,\n                        scientificName,\n                        plantingSeason,\n                        growthDuration,\n                        unit,\n                        weight,\n                        cropImgBase64\n                    );\n\n                    if (selectedRow !== null && isEdit) {\n                        crop.updateCrop(crop);\n                        selectedRow = null;\n                        $(\"#submitBtn\").text(\"Add crop\");\n                        $(\"#cancelBtn\").hide();\n                        isEdit = false;\n                    } else {\n                        crop.createCrop(crop);\n                    }\n\n                    getCrop();\n                    displayCrops();\n\n                    // Clear form fields after submission\n                    $(\"#cropForm\")[0].reset();\n                    $(\"#cropTableBody tr\").removeClass(\"selected-row\");\n                };\n            };\n\n            // Read the image file as a data URL (base64)\n            reader.readAsDataURL(cropImgFile);\n        } else {\n            // Handle form submission without a new image\n            // Use null for image when no new image is provided during update\n            if (selectedRow !== null && isEdit) {\n                let crop = new Crop(\n                    cropId,\n                    cropName,\n                    cropType,\n                    scientificName,\n                    plantingSeason,\n                    growthDuration,\n                    unit,\n                    weight,\n                    prevCropImg\n                );\n                crop.updateCrop(crop);\n                selectedRow = null;\n                $(\"#submitBtn\").text(\"Add crop\");\n                $(\"#cancelBtn\").hide();\n                isEdit = false;\n            } else {\n                let crop = new Crop(\n                    cropId,\n                    cropName,\n                    cropType,\n                    scientificName,\n                    plantingSeason,\n                    growthDuration,\n                    unit,\n                    weight,\n                    null\n                );\n                crop.createCrop(crop);\n            }\n\n            getCrop();\n            displayCrops();\n            prevCropImg = \"\";\n\n            // Clear form fields after submission\n            $(\"#cropForm\")[0].reset();\n            $(\"#lblCropImg\").val(\"Upload Image:\");\n            $(\"#cropTableBody tr\").removeClass(\"selected-row\");\n            $(\"#editBtn\").prop(\"disabled\", true);\n            $(\"#deleteBtn\").prop(\"disabled\", true);\n        }\n    });\n\n    function resetFields() {\n        // Reset UI states\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n        selectedRow = null;\n        $(\"#cropTableBody tr\").removeClass(\"selected-row\");\n    }\n\n    $(\"#editBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Edit\",\n            \"Are you sure you want to edit this crop's details?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            $(\"#editModal\").modal(\"hide\");\n            $(\"#cancelBtn\").show();\n            $(\"#cropId\").val(crop.cropId);\n            $(\"#cropName\").val(crop.cropName);\n            $(\"#cropType\").val(crop.cropType);\n            $(\"#scientificName\").val(crop.scientificName);\n            $(\"#plantingSeason\").val(crop.plantingSeason);\n            $(\"#growthDuration\").val(crop.growthDuration);\n            $(\"#unit\").val(crop.unit);\n            $(\"#weight\").val(crop.weight);\n            prevCropImg = crop.cropImg;\n            $(\"#lblCropImg\").text(\"Upload New Image (Optional):\");\n            isEdit = true;\n\n            $(\"#type\").val(crop.type);\n            $(\"#submitBtn\").text(\"Update Crop\");\n        }\n        $(\"#cropTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    // Cancel button click handler\n    $(\"#cancelEdit\").click(function () {\n        resetFields();\n        $(\"#cropTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    // Cancel button click handler\n    $(\"#cancelBtn\").click(function () {\n        selectedRow = null;\n        $(\"#cropForm\")[0].reset();\n        $(\"#submitBtn\").text(\"Add Crop\");\n        $(\"#cancelBtn\").hide();\n        $(\"#cropTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    // Delete button click handler\n    $(\"#deleteBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Deletion\",\n            \"Are you sure you want to delete this crop?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            let cropToDelete = new Crop();\n            cropToDelete.removeCrop(crop.cropId);\n            getCrop();\n            displayCrops();\n            resetFields();\n        } else {\n            // If Cancel is clicked, do nothing or add additional handling if needed\n            console.log(\"Delete action was canceled.\");\n            $(\"#cropTableBody tr\").removeClass(\"selected-row\");\n            $(\"#editBtn\").prop(\"disabled\", true);\n            $(\"#deleteBtn\").prop(\"disabled\", true);\n        }\n    });\n\n    // Row click handler (for selecting rows)\n    $(\"#cropTableBody\").on(\"click\", \"tr\", function () {\n        var $this = $(this);\n        var cropId = $this.data(\"index\");\n        crop = crops.find((u) => u.cropId === cropId);\n        selectedRow = cropId;\n        // Highlight selected row\n        if (selectedRow !== null) {\n            $(\"#cropTableBody tr\").removeClass(\"selected-row\");\n            $(\"#cropTableBody tr\")\n                .filter(function () {\n                    return (\n                        parseInt($(this).find(\"td:eq(0)\").text(), 10) ===\n                        selectedRow\n                    );\n                })\n                .addClass(\"selected-row\");\n            $(\"#editBtn\").prop(\"disabled\", false);\n            $(\"#deleteBtn\").prop(\"disabled\", false);\n        } else {\n            $(\"#cropTableBody tr\").removeClass(\"selected-row\");\n        }\n    });\n}\n\nexport { Crop, getCrop, searchCrop, initializeMethodsCrop, crops };\n","import Dialog from \"../helpers/Dialog.js\";\nimport { getCrop } from \"../../../js/fetch.js\";\n\n// CropVariety.js\nlet cropVarieties = [];\n\nclass CropVariety {\n    constructor(\n        varietyId,\n        cropId,\n        varietyName,\n        color,\n        size,\n        flavor,\n        growthConditions,\n        pestDiseaseResistance,\n        recommendedPractices,\n        cropImg\n    ) {\n        this.varietyId = varietyId; // Unique identifier for the crop variety\n        this.cropId = cropId; // Foreign key linking to the Crop model\n        this.varietyName = varietyName; // Name of the specific crop variety\n        this.color = color; // Color characteristic of the crop variety\n        this.size = size; // Size characteristic of the crop variety\n        this.flavor = flavor; // Flavor profile of the variety\n        this.growthConditions = growthConditions; // Conditions required for optimal growth\n        this.pestDiseaseResistance = pestDiseaseResistance; // Resistance to pests/diseases\n        this.recommendedPractices = recommendedPractices; // Recommended farming practices\n        this.cropImg = cropImg; // Image of the crop\n    }\n\n    async createCropVariety(cropVariety) {\n        // Check for duplicates based on varietyName\n        const existingVariety = cropVarieties.find(\n            (c) =>\n                c.varietyName === cropVariety.varietyName &&\n                c.cropId === cropVariety.cropId\n        );\n        if (existingVariety) {\n            alert(\"Crop variety with the same name already exists\");\n            return;\n        }\n\n        // Show the static uploading message\n        $(\"#progressMessage\").text(\"Uploading...\");\n        $(\"#loader\").show(); // Show the loader\n        $(\"body\").addClass(\"no-scroll\"); // Optional: Add a class to disable scrolling\n\n        try {\n            await $.ajax({\n                url: \"/api/crop-varieties\",\n                type: \"POST\",\n                contentType: \"application/json\",\n                data: JSON.stringify(cropVariety),\n            });\n            console.log(\"Success:\", cropVariety);\n            toastr.success(\"Crop variety added successfully!\", \"Success\", {\n                timeOut: 5000, // 5 seconds\n                positionClass: \"toast-top-center\",\n                toastClass: \"toast-success-custom\",\n            });\n        } catch (error) {\n            console.error(\"Error:\", error);\n            toastr.error(\n                \"Failed to add crop variety. Please try again.\",\n                \"Error\",\n                {\n                    timeOut: 5000, // 5 seconds\n                    positionClass: \"toast-top-center\",\n                    toastClass: \"toast-error-custom\",\n                }\n            );\n        } finally {\n            // Hide the loader and re-enable user interaction\n            $(\"#loader\").hide();\n            $(\"body\").removeClass(\"no-scroll\"); // Remove the class to re-enable scrolling\n            $(\"#progressMessage\").text(\"\"); // Clear the progress message\n        }\n    }\n\n    updateCropVariety(updatedCropVariety) {\n        // Check for duplicates based on varietyName, excluding the current crop variety\n        const existingVariety = cropVarieties.find(\n            (c) =>\n                c.varietyName === updatedCropVariety.varietyName &&\n                c.varietyId !== updatedCropVariety.varietyId\n        );\n        if (existingVariety) {\n            alert(\"Crop variety with the same name already exists\");\n            return;\n        }\n\n        // Update the crop variety in the local cropVarieties array\n        cropVarieties = cropVarieties.map((variety) =>\n            variety.varietyId === updatedCropVariety.varietyId\n                ? { ...variety, ...updatedCropVariety }\n                : variety\n        );\n\n        fetch(`/api/crop-varieties/${updatedCropVariety.varietyId}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(updatedCropVariety),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(\"Success:\", data);\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n\n    removeCropVariety(varietyId) {\n        fetch(`/api/crop-varieties/${varietyId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((response) => {\n                if (response.status === 204) {\n                    cropVarieties = cropVarieties.filter(\n                        (variety) => variety.varietyId !== varietyId\n                    );\n                    console.log(`Crop variety with ID ${varietyId} deleted.`);\n                } else if (response.status === 404) {\n                    console.error(\n                        `Crop variety with ID ${varietyId} not found.`\n                    );\n                } else {\n                    console.error(\n                        `Failed to delete crop variety with ID ${varietyId}.`\n                    );\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n}\n\nfunction getCropVarieties() {\n    // Fetch crops from Laravel backend\n    $.ajaxSetup({\n        headers: {\n            \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr(\"content\"),\n        },\n    });\n\n    // Fetch crops from Laravel backend\n    $.ajax({\n        url: \"/api/crop-varieties\", // Endpoint to fetch crops\n        method: \"GET\",\n        success: function (response) {\n            // Assuming response is an array of crops\n            let cropVariety = response;\n\n            cropVarieties = cropVariety;\n            console.log(cropVarieties);\n        },\n        error: function (xhr, status, error) {\n            console.error(\"Error fetching crops:\", error);\n        },\n    });\n}\n\ngetCropVarieties();\n\nfunction searchCropVariety(varietyName) {\n    const foundCropVarieties = cropVarieties.filter((variety) =>\n        variety.varietyName.toLowerCase().includes(varietyName.toLowerCase())\n    );\n    return foundCropVarieties;\n}\n\nfunction initializeMethodsCropVariety() {\n    var selectedRow = null;\n    var pageSize = 5;\n    var currentPage = 1;\n    var isEdit = false;\n    var variety = null;\n\n    async function displayCropVarieties(varietyName = null) {\n        // Simulate a delay of 1 second\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n\n        // Clear the table body\n        $(\"#cropVarietyTableBody\").empty();\n\n        // Fetch crop names once using getCrop()\n        const crops = await getCrop(); // Assumes getCrop returns a list of { cropId, cropName }\n\n        // Create a map of cropId to cropName for easy lookup\n        const cropMap = crops.reduce((map, crop) => {\n            map[crop.cropId] = crop.cropName;\n            return map;\n        }, {});\n\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = startIndex + pageSize;\n\n        if (varietyName) {\n            // Use the searchCropVariety function to find matching varieties\n            const foundVarieties = searchCropVariety(varietyName);\n            if (foundVarieties.length > 0) {\n                foundVarieties.forEach((variety) => {\n                    const cropName = cropMap[variety.cropId] || \"Unknown Crop\"; // Get cropName or fallback to 'Unknown Crop'\n                    $(\"#cropVarietyTableBody\").append(`\n                        <tr data-index=\"${variety.varietyId}\" class=\"text-center\">\n                            <td style=\"display: none;\">${variety.varietyId}</td>\n                            <td><img src=\"${variety.cropImg}\" alt=\"${variety.varietyName}\" class=\"img-thumbnail\" width=\"50\" height=\"50\"></td>\n                            <td>${variety.varietyName}</td>\n                            <td>${cropName}</td> <!-- Display the associated cropName -->\n                            <td class=\"crop-cell\" title=\"${variety.color}\">${variety.color}</td>\n                            <td class=\"crop-cell\" title=\"${variety.size}\">${variety.size}</td>\n                            <td class=\"crop-cell\" title=\"${variety.flavor}\">${variety.flavor}</td>\n                            <td class=\"crop-cell\" title=\"${variety.growthConditions}\">${variety.growthConditions}</td>\n                            <td class=\"crop-cell\" title=\"${variety.pestDiseaseResistance}\">${variety.pestDiseaseResistance}</td>\n                            <td class=\"crop-cell\" title=\"${variety.recommendedPractices}\">${variety.recommendedPractices}</td>\n                        </tr>\n                    `);\n                });\n            } else {\n                // Handle case where varietyName is not found\n                $(\"#cropVarietyTableBody\").append(`\n                    <tr>\n                        <td colspan=\"10\">Crop variety not found!</td>\n                    </tr>\n                `);\n            }\n        } else {\n            // Display paginated crop varieties if no varietyName is provided\n            for (var i = startIndex; i < endIndex; i++) {\n                if (i >= cropVarieties.length) {\n                    break;\n                }\n                var variety = cropVarieties[i];\n                const cropName = cropMap[variety.cropId] || \"Unknown Crop\"; // Get cropName or fallback to 'Unknown Crop'\n                $(\"#cropVarietyTableBody\").append(`\n                    <tr data-index=\"${variety.varietyId}\" class=\"text-center\">\n                        <td style=\"display: none;\">${variety.varietyId}</td>\n                        <td><img src=\"${variety.cropImg}\" alt=\"${variety.varietyName}\" class=\"img-thumbnail\" width=\"50\" height=\"50\"></td>\n                        <td>${variety.varietyName}</td>\n                        <td>${cropName}</td> <!-- Display the associated cropName -->\n                        <td class=\"crop-cell\" title=\"${variety.color}\">${variety.color}</td>\n                        <td class=\"crop-cell\" title=\"${variety.size}\">${variety.size}</td>\n                        <td class=\"crop-cell\" title=\"${variety.flavor}\">${variety.flavor}</td>\n                        <td class=\"crop-cell\" title=\"${variety.growthConditions}\">${variety.growthConditions}</td>\n                        <td class=\"crop-cell\" title=\"${variety.pestDiseaseResistance}\">${variety.pestDiseaseResistance}</td>\n                        <td class=\"crop-cell\" title=\"${variety.recommendedPractices}\">${variety.recommendedPractices}</td>\n                    </tr>\n                `);\n            }\n        }\n    }\n\n    // Display initial crop varieties\n    displayCropVarieties();\n\n    $(\"#search\").on(\"input\", function () {\n        let varietyName = $(\"#search\").val();\n        displayCropVarieties(varietyName);\n    });\n\n    // Pagination: Previous button click handler\n    $(\"#prevBtn\").click(function () {\n        if (currentPage > 1) {\n            currentPage--;\n            displayCropVarieties();\n        }\n    });\n\n    // Pagination: Next button click handler\n    $(\"#nextBtn\").click(function () {\n        var totalPages = Math.ceil(crops.length / pageSize);\n        if (currentPage < totalPages) {\n            currentPage++;\n            displayCropVarieties();\n        }\n    });\n\n    let prevCropVarietyImg = \"\";\n\n    $(\"#submitBtn\").click(function (event) {\n        event.preventDefault();\n\n        var varietyId = Number($(\"#varietyId\").val());\n        var cropId = Number($(\"#cropId\").val()); // Assuming cropId is still needed to associate the variety\n        var varietyName = $(\"#varietyName\").val();\n        var color = $(\"#color\").val(); // New input field for color\n        var size = $(\"#size\").val(); // New input field for size\n        var flavor = $(\"#flavor\").val(); // New input field for flavor profile\n        var growthConditions = $(\"#growthConditions\").val(); // New input field for growth conditions\n        var pestDiseaseResistance = $(\"#pestDiseaseResistance\").val(); // New input field for pest/disease resistance\n        var recommendedPractices = $(\"#recommendedPractices\").val(); // New input field for recommended practices\n\n        // Get the file input element and the selected file\n        var cropImgFile = document.getElementById(\"cropImg\").files[0];\n        var cropImgBase64 = null; // Initialize as null\n\n        console.log(selectedRow);\n        if (cropImgFile) {\n            var reader = new FileReader();\n            reader.onloadend = function () {\n                var img = new Image();\n                img.src = reader.result;\n\n                img.onload = function () {\n                    // Create a canvas to draw the image on\n                    var canvas = document.createElement(\"canvas\");\n                    var ctx = canvas.getContext(\"2d\");\n\n                    // Set the canvas size to the image size\n                    canvas.width = img.width;\n                    canvas.height = img.height;\n\n                    // Draw the image on the canvas\n                    ctx.drawImage(img, 0, 0);\n\n                    // Convert the canvas image to WebP format (quality can be adjusted)\n                    cropImgBase64 = canvas.toDataURL(\"image/webp\", 0.8); // 0.8 is the quality factor\n\n                    // Create the CropVariety object with the WebP base64 image string\n                    let variety = new CropVariety(\n                        varietyId,\n                        cropId,\n                        varietyName,\n                        color,\n                        size,\n                        flavor,\n                        growthConditions,\n                        pestDiseaseResistance,\n                        recommendedPractices,\n                        cropImgBase64\n                    );\n\n                    if (selectedRow !== null && isEdit) {\n                        variety.updateCropVariety(variety);\n                        selectedRow = null;\n                        $(\"#submitBtn\").text(\"Add Crop Variety\");\n                        $(\"#cancelBtn\").hide();\n                        isEdit = false;\n                    } else {\n                        variety.createCropVariety(variety);\n                    }\n\n                    getCropVarieties(); // Ensure this function is defined for getting varieties\n                    displayCropVarieties(); // Call the function to display varieties\n\n                    // Clear form fields after submission\n                    $(\"#cropVarietyForm\")[0].reset();\n                    $(\"#cropVarietyTableBody tr\").removeClass(\"selected-row\");\n                };\n            };\n\n            // Read the image file as a data URL (base64)\n            reader.readAsDataURL(cropImgFile);\n        } else {\n            // Handle form submission without a new image\n            // Use null for image when no new image is provided during update\n            if (selectedRow !== null && isEdit) {\n                let variety = new CropVariety(\n                    varietyId,\n                    cropId,\n                    varietyName,\n                    color,\n                    size,\n                    flavor,\n                    growthConditions,\n                    pestDiseaseResistance,\n                    recommendedPractices,\n                    prevCropVarietyImg\n                );\n                variety.updateCropVariety(variety);\n                selectedRow = null;\n                $(\"#submitBtn\").text(\"Add Crop Variety\");\n                $(\"#cancelBtn\").hide();\n                isEdit = false;\n            } else {\n                let variety = new CropVariety(\n                    varietyId,\n                    cropId,\n                    varietyName,\n                    color,\n                    size,\n                    flavor,\n                    growthConditions,\n                    pestDiseaseResistance,\n                    recommendedPractices,\n                    null\n                );\n                variety.createCropVariety(variety);\n            }\n\n            getCropVarieties(); // Ensure this function is defined for getting varieties\n            displayCropVarieties(); // Call the function to display varieties\n            prevCropVarietyImg = \"\";\n\n            // Clear form fields after submission\n            $(\"#cropVarietyForm\")[0].reset();\n            $(\"#lblCropImg\").val(\"Upload Image:\");\n            $(\"#cropVarietyTableBody tr\").removeClass(\"selected-row\");\n            $(\"#editBtn\").prop(\"disabled\", true);\n            $(\"#deleteBtn\").prop(\"disabled\", true);\n        }\n    });\n\n    function resetFields() {\n        // Reset UI states\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n        selectedRow = null;\n        $(\"#cropVarietyTableBody tr\").removeClass(\"selected-row\");\n    }\n\n    $(\"#editBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Edit\",\n            \"Are you sure you want to edit this crop variety's details?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            $(\"#editModal\").modal(\"hide\");\n            $(\"#cancelBtn\").show();\n\n            // Assuming `variety` is the selected CropVariety object\n            $(\"#varietyId\").val(variety.varietyId); // Add varietyId field\n            $(\"#cropId\").val(variety.cropId); // Assuming this field is still needed\n            $(\"#varietyName\").val(variety.varietyName);\n            $(\"#color\").val(variety.color); // New input for color\n            $(\"#size\").val(variety.size); // New input for size\n            $(\"#flavor\").val(variety.flavor); // New input for flavor\n            $(\"#growthConditions\").val(variety.growthConditions); // New input for growth conditions\n            $(\"#pestDiseaseResistance\").val(variety.pestDiseaseResistance); // New input for pest/disease resistance\n            $(\"#recommendedPractices\").val(variety.recommendedPractices); // New input for recommended practices\n\n            prevCropVarietyImg = variety.cropImg; // Store the previous image for updates\n            $(\"#lblCropImg\").text(\"Upload New Image (Optional):\");\n            isEdit = true;\n\n            $(\"#submitBtn\").text(\"Update Variety\");\n        }\n        $(\"#cropVarietyTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    // Cancel button click handler\n    $(\"#cancelEdit\").click(function () {\n        resetFields();\n        $(\"#cropVarietyTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    // Cancel button click handler\n    $(\"#cancelBtn\").click(function () {\n        selectedRow = null;\n        $(\"#cropVarietyForm\")[0].reset();\n        $(\"#submitBtn\").text(\"Add Crop Variety\");\n        $(\"#cancelBtn\").hide();\n        $(\"#cropVarietyTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    // Delete button click handler\n    $(\"#deleteBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Deletion\",\n            \"Are you sure you want to delete this crop variety?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            let varietyToDelete = new CropVariety();\n            varietyToDelete.removeCropVariety(variety.varietyId);\n            getCropVarieties();\n            displayCropVarieties();\n            resetFields();\n        } else {\n            // If Cancel is clicked, do nothing or add additional handling if needed\n            console.log(\"Delete action was canceled.\");\n            $(\"#cropVarietyTableBody tr\").removeClass(\"selected-row\");\n            $(\"#editBtn\").prop(\"disabled\", true);\n            $(\"#deleteBtn\").prop(\"disabled\", true);\n        }\n    });\n\n    // Row click handler (for selecting rows)\n    $(\"#cropVarietyTableBody\").on(\"click\", \"tr\", function () {\n        var $this = $(this);\n        var varietyId = $this.data(\"index\");\n        variety = cropVarieties.find((u) => u.varietyId === varietyId);\n        selectedRow = varietyId;\n        // Highlight selected row\n        if (selectedRow !== null) {\n            $(\"#cropVarietyTableBody tr\").removeClass(\"selected-row\");\n            $(\"#cropVarietyTableBody tr\")\n                .filter(function () {\n                    return (\n                        parseInt($(this).find(\"td:eq(0)\").text(), 10) ===\n                        selectedRow\n                    );\n                })\n                .addClass(\"selected-row\");\n            $(\"#editBtn\").prop(\"disabled\", false);\n            $(\"#deleteBtn\").prop(\"disabled\", false);\n        } else {\n            $(\"#cropVarietyTableBody tr\").removeClass(\"selected-row\");\n        }\n    });\n}\n\nexport {\n    CropVariety,\n    getCropVarieties,\n    searchCropVariety,\n    initializeMethodsCropVariety,\n    cropVarieties,\n};\n","import Dialog from \"../helpers/Dialog.js\";\n\n// Barangay.js\nlet barangays = [];\n\nclass Barangay {\n    constructor(barangayId, barangayName, coordinates) {\n        this.barangayId = barangayId;\n        this.barangayName = barangayName;\n        //get from leaflet\n        this.coordinates = coordinates;\n    }\n\n    createBarangay(barangay) {\n        const existingBarangay = barangays.find(\n            (b) => b.barangayName === barangay.barangayName\n        );\n        if (existingBarangay) {\n            alert(\"Barangay already exists\");\n            return;\n        }\n\n        fetch(\"/api/barangays\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(barangay),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(\"Success:\", data);\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n\n    updateBarangay(updatedBarangay) {\n        const existingBarangay = barangays.find(\n            (b) => b.barangayName === updatedBarangay.barangayName\n        );\n\n        if (\n            existingBarangay &&\n            existingBarangay.barangayId !== updatedBarangay.barangayId\n        ) {\n            alert(\"Barangay already exists\");\n            return;\n        }\n\n        barangays = barangays.map((barangay) =>\n            barangay.barangayId === updatedBarangay.barangayId\n                ? { ...barangay, ...updatedBarangay }\n                : barangays\n        );\n\n        fetch(`/api/barangays/${updatedBarangay.barangayId}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(updatedBarangay),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(\"Success:\", data);\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n\n    removeBarangay(barangayId) {\n        fetch(`/api/barangays/${barangayId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((response) => {\n                if (response.status === 204) {\n                    barangays = barangays.filter(\n                        (barangay) => barangay.barangayId !== barangay\n                    );\n                    console.log(`Barangay with ID ${barangayId} deleted.`);\n                } else if (response.status === 404) {\n                    console.error(`Barangay with ID ${barangayId} not found.`);\n                } else {\n                    console.error(\n                        `Failed to delete barangay with ID ${barangayId}.`\n                    );\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n}\n\nfunction getBarangay() {\n    // Fetch barangays from Laravel backend\n    $.ajaxSetup({\n        headers: {\n            \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr(\"content\"),\n        },\n    });\n\n    // Fetch barangays from Laravel backend\n    $.ajax({\n        url: \"/api/barangays\", // Endpoint to fetch barangays\n        method: \"GET\",\n        success: function (response) {\n            // Assuming response is an array of barangays\n            let barangay = response;\n\n            barangays = barangay;\n            console.log(barangays);\n        },\n        error: function (xhr, status, error) {\n            console.error(\"Error fetching barangays:\", error);\n        },\n    });\n}\n\ngetBarangay();\n\nasync function fetchCoordinates(locationName) {\n    locationName = `${locationName}, Cabuyao, Laguna, Philippines`;\n    console.log(locationName);\n    const response = await fetch(\n        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\n            locationName\n        )}`\n    );\n    const data = await response.json();\n    if (data && data.length > 0) {\n        return [parseFloat(data[0].lat), parseFloat(data[0].lon)];\n    }\n    return null;\n}\n\nasync function getCoordinates(locationName) {\n    const coordinates = await fetchCoordinates(locationName);\n    if (coordinates) {\n        const formattedCoordinates = `${coordinates[0]},${coordinates[1]}`;\n        console.log(`Coordinates: ${formattedCoordinates}`);\n        return formattedCoordinates;\n    } else {\n        console.log(\"Location not found.\");\n        return \"Location not found.\";\n    }\n}\n\nfunction searchBarangay(barangayName) {\n    const foundBarangays = barangays.filter((barangay) =>\n        barangay.barangayName.toLowerCase().includes(barangayName.toLowerCase())\n    );\n    return foundBarangays;\n}\n\nfunction initializeMethodsBarangay() {\n    var selectedRow = null;\n    var pageSize = 5;\n    var currentPage = 1;\n    var barangay = null;\n    var isEdit = false;\n\n    async function displayBarangays(barangayName = null) {\n        // Simulate a delay of 1 second\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n\n        $(\"#barangayTableBody\").empty();\n\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = startIndex + pageSize;\n        if (barangayName) {\n            // Display a single barangay if barangayName is provided\n            const foundbarangays = searchBarangay(barangayName);\n            if (foundbarangays.length > 0) {\n                foundbarangays.forEach((barangay) => {\n                    $(\"#barangayTableBody\").append(`\n                <tr data-index=${barangay.barangayId}>\n                  <td style=\"display: none;\">${barangay.barangayId}</td>\n                  <td>${barangay.barangayName}</td>\n                  <td>${barangay.coordinates}</td>\n                </tr>\n              `);\n                });\n            } else {\n                // Handle case where barangayName is not provided\n                $(\"#barangayTableBody\").append(`\n              <tr>\n                <td colspan=\"4\">barangay not found!</td>\n              </tr>\n            `);\n            }\n        } else {\n            // Display paginated barangays if no barangayName is provided\n            for (var i = startIndex; i < endIndex; i++) {\n                if (i >= barangays.length) {\n                    break;\n                }\n                var barangay = barangays[i];\n                $(\"#barangayTableBody\").append(`\n            <tr data-index=${barangay.barangayId}>\n              <td style=\"display: none;\">${barangay.barangayId}</td>\n              <td>${barangay.barangayName}</td>\n              <td>${barangay.coordinates}</td>\n            </tr>\n          `);\n            }\n        }\n    }\n\n    // Display initial barangays\n    displayBarangays();\n\n    $(\"#search\").on(\"input\", function () {\n        let barangayName = $(\"#search\").val();\n        displayBarangays(barangayName);\n    });\n\n    // Pagination: Previous button click handler\n    $(\"#prevBtn\").click(function () {\n        if (currentPage > 1) {\n            currentPage--;\n            displayBarangays();\n        }\n    });\n\n    // Pagination: Next button click handler\n    $(\"#nextBtn\").click(function () {\n        var totalPages = Math.ceil(barangays.length / pageSize);\n        if (currentPage < totalPages) {\n            currentPage++;\n            displayBarangays();\n        }\n    });\n\n    // Form submission handler (Add or Update barangay)\n    $(\"#submitBtn\").click(function (event) {\n        event.preventDefault();\n\n        var barangayId = Number($(\"#barangayId\").val());\n        var barangayName = $(\"#barangayName\").val();\n        if (selectedRow !== null && isEdit) {\n            // Update existing barangay\n            getCoordinates(barangayName).then((result) => {\n                coordinates = result;\n                if (coordinates === \"Location not found.\") {\n                    alert(\"Unknown location in Cabuyao\");\n                    return;\n                }\n                let barangay = new Barangay(\n                    barangayId,\n                    barangayName,\n                    coordinates\n                );\n                barangay.updateBarangay(barangay);\n                getBarangay();\n                displayBarangays();\n            });\n            selectedRow = null;\n            $(\"#submitBtn\").text(\"Add barangay\");\n            $(\"#cancelBtn\").hide();\n            resetFields();\n            isEdit = false;\n        } else {\n            var coordinates = \"\";\n            getCoordinates(barangayName).then((result) => {\n                coordinates = result;\n                if (coordinates === \"Location not found.\") {\n                    alert(\"Unknown location in Cabuyao\");\n                    return;\n                }\n                let barangay = new Barangay(\n                    barangayId,\n                    barangayName,\n                    coordinates\n                );\n                barangay.createBarangay(barangay);\n                getBarangay();\n                displayBarangays();\n            });\n        }\n\n        // Clear form fields after submission\n        $(\"#barangayForm\")[0].reset();\n        selectedRow = null;\n        $(\"#barangayTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    function resetFields() {\n        // Reset UI states\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n        selectedRow = null;\n        $(\"#barangayTableBody tr\").removeClass(\"selected-row\");\n    }\n\n    $(\"#editBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Edit\",\n            \"Are you sure you want to edit this barangay's details?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            $(\"#editModal\").modal(\"hide\");\n            $(\"#cancelBtn\").show();\n            $(\"#barangayId\").val(barangay.barangayId);\n            $(\"#barangayName\").val(barangay.barangayName);\n            $(\"#submitBtn\").text(\"Update Barangay\");\n            isEdit = true;\n        }\n        $(\"#barangayTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    // Cancel button click handler\n    $(\"#cancelEdit\").click(function () {\n        resetFields();\n    });\n\n    // Cancel button click handler\n    $(\"#cancelBtn\").click(function () {\n        selectedRow = null;\n        $(\"#barangayForm\")[0].reset();\n        $(\"#submitBtn\").text(\"Add Barangay\");\n        $(\"#cancelBtn\").hide();\n        $(\"#barangayTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    // Delete button click handler\n    $(\"#deleteBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Deletion\",\n            \"Are you sure you want to delete this barangay?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            // Close the modal\n            $(\"#deleteModal\").modal(\"hide\");\n\n            // Proceed with deletion\n            let barangayToDelete = new Barangay();\n            barangayToDelete.removeBarangay(barangay.barangayId);\n            getBarangay();\n            displayBarangays();\n            resetFields();\n        } else {\n            // If Cancel is clicked, do nothing or add additional handling if needed\n            console.log(\"Delete action was canceled.\");\n            $(\"#editBtn\").prop(\"disabled\", true);\n            $(\"#deleteBtn\").prop(\"disabled\", true);\n        }\n    });\n\n    $(\"#cancelDelete\").click(function () {\n        resetFields();\n    });\n\n    // Row click handler (for selecting rows)\n    $(\"#barangayTableBody\").on(\"click\", \"tr\", function () {\n        var $this = $(this);\n        var barangayId = $this.data(\"index\");\n        barangay = barangays.find((u) => u.barangayId === barangayId);\n        selectedRow = barangayId;\n        // Highlight selected row\n        if (selectedRow !== null) {\n            $(\"#barangayTableBody tr\").removeClass(\"selected-row\");\n            $(\"#barangayTableBody tr\")\n                .filter(function () {\n                    return (\n                        parseInt($(this).find(\"td:eq(0)\").text(), 10) ===\n                        selectedRow\n                    );\n                })\n                .addClass(\"selected-row\");\n            $(\"#editBtn\").prop(\"disabled\", false);\n            $(\"#deleteBtn\").prop(\"disabled\", false);\n        } else {\n            $(\"#barangayTableBody tr\").removeClass(\"selected-row\");\n        }\n    });\n}\n\nexport {\n    Barangay,\n    getBarangay,\n    searchBarangay,\n    barangays,\n    initializeMethodsBarangay,\n};\n","import Dialog from \"../helpers/Dialog.js\";\nimport { addDownload } from \"../../../js/fetch.js\";\n// Farmer.js\nlet farmers = [];\nlet barangayArray = [];\n\nclass Farmer {\n    constructor(\n        barangayId,\n        farmerId,\n        farmerName,\n        fieldArea,\n        fieldType,\n        phoneNumber\n    ) {\n        this.barangayId = barangayId;\n        this.farmerId = farmerId;\n        this.farmerName = farmerName;\n        this.fieldArea = fieldArea;\n        this.fieldType = fieldType;\n        this.phoneNumber = phoneNumber !== null ? String(phoneNumber) : \" \";\n    }\n\n    createFarmer(farmer) {\n        const existingFarmer = farmers.find(\n            (b) => b.farmerName === farmer.farmerName\n        );\n        if (existingFarmer) {\n            alert(\"Farmer already exists\");\n            return;\n        }\n\n        $.ajax({\n            url: \"/api/farmers\",\n            type: \"POST\",\n            contentType: \"application/json\",\n            data: JSON.stringify(farmer),\n            success: function (data) {\n                console.log(\"Success:\", data);\n            },\n            error: function (error) {\n                console.error(\"Error:\", error);\n            },\n        });\n    }\n\n    updateFarmer(updatedFarmer) {\n        const existingFarmer = farmers.find(\n            (b) => b.farmerName === updatedFarmer.farmerName\n        );\n\n        if (\n            existingFarmer &&\n            existingFarmer.farmerId !== updatedFarmer.farmerId\n        ) {\n            alert(\"Farmer already exists\");\n            return;\n        }\n\n        farmers = farmers.map((farmer) =>\n            farmer.farmerId === updatedFarmer.farmerId\n                ? { ...farmer, ...updatedFarmer }\n                : farmers\n        );\n\n        fetch(`/api/farmers/${updatedFarmer.farmerId}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(updatedFarmer),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(\"Success:\", data);\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n\n    removeFarmer(farmerId) {\n        fetch(`/api/farmers/${farmerId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((response) => {\n                if (response.status === 204) {\n                    farmers = farmers.filter(\n                        (farmer) => farmer.farmerId !== farmer\n                    );\n                    console.log(`Farmer with ID ${farmerId} deleted.`);\n                } else if (response.status === 404) {\n                    console.error(`Farmer with ID ${farmerId} not found.`);\n                } else {\n                    console.error(\n                        `Failed to delete farmer with ID ${farmerId}.`\n                    );\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n}\n\nfunction getFarmer() {\n    // Fetch farmers from Laravel backend\n    $.ajaxSetup({\n        headers: {\n            \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr(\"content\"),\n        },\n    });\n\n    // Fetch farmers from Laravel backend\n    $.ajax({\n        url: \"/api/farmers\", // Endpoint to fetch farmers\n        method: \"GET\",\n        success: function (response) {\n            // Assuming response is an array of farmers\n            let farmer = response;\n\n            farmers = farmer;\n            console.log(farmers);\n        },\n        error: function (xhr, status, error) {\n            console.error(\"Error fetching farmers:\", error);\n        },\n    });\n}\n\ngetFarmer();\n\nfunction getBarangayNames() {\n    // Fetch barangays from Laravel backend\n    $.ajaxSetup({\n        headers: {\n            \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr(\"content\"),\n        },\n    });\n\n    // Fetch barangays from Laravel backend\n    $.ajax({\n        url: \"/api/barangays\", // Endpoint to fetch barangays\n        method: \"GET\",\n        success: function (response) {\n            // Assuming response is an array of barangays\n            const barangays = response;\n            barangayArray = barangays;\n            console.log(barangays);\n\n            // Populate select dropdown with barangays\n            const barangaySelect = $(\"#barangay-option\");\n            barangaySelect.empty(); // Clear existing options\n            barangaySelect.append(\n                `<option value=\"\" disabled selected>Select Barangay</option>`\n            );\n            barangays.forEach((b) => {\n                barangaySelect.append(\n                    `<option value=\"${b.barangayId}\">${b.barangayName}</option>`\n                );\n            });\n        },\n        error: function (xhr, status, error) {\n            console.error(\"Error fetching barangays:\", error);\n        },\n    });\n}\n\nfunction searchFarmer(searchTerm) {\n    const lowerCaseSearchTerm = searchTerm.toLowerCase(); // Convert search term to lowercase for case-insensitive search\n\n    const foundFarmers = farmers.filter((farmer) => {\n        // Check against farmer properties\n        const matchesFarmerProperties = Object.values(farmer).some(\n            (value) =>\n                value !== null &&\n                value.toString().toLowerCase().includes(lowerCaseSearchTerm)\n        );\n\n        // Check if the barangay name matches by looking up the barangayId\n        const barangayName = getBarangayName(farmer.barangayId); // Get the barangay name from the ID\n        const matchesBarangayName =\n            barangayName &&\n            barangayName.toLowerCase().includes(lowerCaseSearchTerm);\n\n        return matchesFarmerProperties || matchesBarangayName;\n    });\n\n    return foundFarmers;\n}\n\nfunction getBarangayName(id) {\n    // Find the barangay object with the matching ID\n    const barangay = barangayArray.find(\n        (barangay) => barangay.barangayId === id\n    );\n\n    // Return the name of the barangay if found, or null if not found\n    return barangay ? barangay.barangayName : null;\n}\n\nfunction getBarangayId(name) {\n    // Find the barangay object with the matching ID\n    const barangay = barangayArray.find(\n        (barangay) => barangay.barangaName === name\n    );\n\n    // Return the name of the barangay if found, or null if not found\n    return barangay ? barangay.barangayId : null;\n}\n\nfunction initializeMethodsFarmer() {\n    var selectedRow = null;\n    var pageSize = 5;\n    var currentPage = 1;\n    var farmer = null;\n    var isEdit = false;\n\n    async function displayFarmers(searchTerm = null) {\n        // Simulate a delay of 1 second\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n\n        $(\"#farmerTableBody\").empty();\n\n        if (searchTerm) {\n            // Display farmers that match the search term\n            const foundFarmers = searchFarmer(searchTerm);\n\n            // Calculate start and end indices based on current page and page size\n            const startIndex = (currentPage - 1) * pageSize;\n            const endIndex = startIndex + pageSize;\n\n            // Paginate the found farmers\n            const paginatedFarmers = foundFarmers.slice(startIndex, endIndex);\n\n            if (paginatedFarmers.length > 0) {\n                paginatedFarmers.forEach((farmer) => {\n                    $(\"#farmerTableBody\").append(`\n                        <tr data-index=${farmer.farmerId}>\n                            <td style=\"display: none;\">${farmer.farmerId}</td>\n                            <td>${getBarangayName(farmer.barangayId)}</td>\n                            <td>${farmer.farmerName}</td>\n                            <td>${farmer.fieldArea}</td>\n                            <td>${farmer.fieldType}</td>\n                            <td>${\n                                farmer.phoneNumber !== null\n                                    ? farmer.phoneNumber\n                                    : \"NA\"\n                            }</td>\n                        </tr>\n                    `);\n                });\n            } else {\n                // Handle case where no farmers are found\n                $(\"#farmerTableBody\").append(`\n                    <tr>\n                        <td colspan=\"6\">No farmers found!</td>\n                    </tr>\n                `);\n            }\n        } else {\n            // Display paginated farmers if no searchTerm is provided\n            const paginatedFarmers = farmers.slice(\n                (currentPage - 1) * pageSize,\n                currentPage * pageSize\n            );\n\n            if (paginatedFarmers.length > 0) {\n                paginatedFarmers.forEach((farmer) => {\n                    $(\"#farmerTableBody\").append(`\n                        <tr data-index=${farmer.farmerId}>\n                            <td style=\"display: none;\">${farmer.farmerId}</td>\n                            <td data-barangay-id=${\n                                farmer.barangayId\n                            }>${getBarangayName(farmer.barangayId)}</td>\n                            <td>${farmer.farmerName}</td>\n                            <td>${farmer.fieldArea}</td>\n                            <td>${farmer.fieldType}</td>\n                            <td>${\n                                farmer.phoneNumber !== null\n                                    ? farmer.phoneNumber\n                                    : \"NA\"\n                            }</td>\n                        </tr>\n                    `);\n                });\n            } else {\n                // Handle case where no farmers are available\n                $(\"#farmerTableBody\").append(`\n                    <tr>\n                        <td colspan=\"6\">No farmers available!</td>\n                    </tr>\n                `);\n            }\n        }\n    }\n\n    // Display initial farmers\n    displayFarmers();\n\n    $(\"#search\").on(\"input\", function () {\n        let farmerName = $(\"#search\").val();\n        displayFarmers(farmerName);\n    });\n\n    // Pagination: Previous button click handler\n    $(\"#prevBtn\").click(function () {\n        if (currentPage > 1) {\n            currentPage--;\n            displayFarmers();\n        }\n    });\n\n    // Pagination: Next button click handler\n    $(\"#nextBtn\").click(function () {\n        var totalPages = Math.ceil(farmers.length / pageSize);\n        if (currentPage < totalPages) {\n            currentPage++;\n            displayFarmers();\n        }\n    });\n\n    // Form submission handler (Add or Update farmer)\n    $(\"#submitBtn\").click(function (event) {\n        event.preventDefault();\n\n        var farmerId = Number($(\"#farmerId\").val());\n        var farmerName = $(\"#farmerName\").val();\n        var fieldArea = parseInt($(\"#fieldArea\").val(), 10);\n        var fieldType = $(\"#fieldType\").val();\n        var phoneNumber = $(\"#phoneNumber\").val();\n        var barangayId = parseInt($(\"#barangay-option\").val(), 10);\n        if (selectedRow !== null && isEdit) {\n            let farmer = new Farmer(\n                barangayId,\n                farmerId,\n                farmerName,\n                fieldArea,\n                fieldType,\n                phoneNumber\n            );\n            console.log(farmer);\n            farmer.updateFarmer(farmer);\n            selectedRow = null;\n            $(\"#submitBtn\").text(\"Add farmer\");\n            $(\"#cancelBtn\").hide();\n            resetFields();\n            isEdit = false;\n        } else {\n            let farmer = new Farmer(\n                barangayId,\n                farmerId,\n                farmerName,\n                fieldArea,\n                fieldType,\n                phoneNumber\n            );\n            console.log(farmer);\n            farmer.createFarmer(farmer);\n        }\n\n        // Clear form fields after submission\n        $(\"#farmerForm\")[0].reset();\n        selectedRow = null;\n        $(\"#farmerTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n        getFarmer();\n        displayFarmers();\n    });\n\n    function resetFields() {\n        // Reset UI states\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n        selectedRow = null;\n        $(\"#farmerTableBody tr\").removeClass(\"selected-row\");\n    }\n\n    $(\"#editBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Edit\",\n            \"Are you sure you want to edit this farmer's details?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            // Proceed with editing\n            $(\"#editModal\").modal(\"hide\");\n            $(\"#cancelBtn\").show();\n            $(\"#farmerId\").val(farmer.farmerId);\n            $(\"#farmerName\").val(farmer.farmerName);\n            $(\"#fieldArea\").val(farmer.fieldArea);\n            $(\"#fieldType\").val(farmer.fieldType);\n            $(\"#phoneNumber\").val(farmer.phoneNumber);\n            $(\"#barangay-option\").val(farmer.barangayId);\n            $(\"#submitBtn\").text(\"Update Farmer\");\n        } else {\n            // If Cancel is clicked, do nothing or add additional handling if needed\n            console.log(\"Edit action was canceled.\");\n        }\n        $(\"#farmerTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    $(\"#cancelEdit\").click(function () {\n        resetFields();\n    });\n\n    // Cancel button click handler\n    $(\"#cancelBtn\").click(function () {\n        selectedRow = null;\n        $(\"#farmerForm\")[0].reset();\n        $(\"#submitBtn\").text(\"Add Farmer\");\n        $(\"#cancelBtn\").hide();\n        $(\"#farmerTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    $(\"#deleteBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Deletion\",\n            \"Are you sure you want to delete this farmer?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            // Proceed with deletion\n            let farmerToDelete = new Farmer();\n            farmerToDelete.removeFarmer(farmer.farmerId);\n            getFarmer();\n            displayFarmers();\n            resetFields();\n            isEdit = true;\n        } else {\n            // If Cancel is clicked, do nothing or add additional handling if needed\n            console.log(\"Delete action was canceled.\");\n            $(\"#editBtn\").prop(\"disabled\", true);\n            $(\"#deleteBtn\").prop(\"disabled\", true);\n        }\n    });\n\n    $(\"#cancelDelete\").click(function () {\n        resetFields();\n    });\n\n    // Row click handler (for selecting rows)\n    $(\"#farmerTableBody\").on(\"click\", \"tr\", function () {\n        var $this = $(this);\n        var farmerId = $this.data(\"index\");\n        farmer = farmers.find((u) => u.farmerId === farmerId);\n        selectedRow = farmerId;\n        // Highlight selected row\n        if (selectedRow !== null) {\n            $(\"#farmerTableBody tr\").removeClass(\"selected-row\");\n            $(\"#farmerTableBody tr\")\n                .filter(function () {\n                    return (\n                        parseInt($(this).find(\"td:eq(0)\").text(), 10) ===\n                        selectedRow\n                    );\n                })\n                .addClass(\"selected-row\");\n            $(\"#editBtn\").prop(\"disabled\", false);\n            $(\"#deleteBtn\").prop(\"disabled\", false);\n        } else {\n            $(\"#farmerTableBody tr\").removeClass(\"selected-row\");\n        }\n    });\n\n    $(document).ready(function () {\n        $(\".download-btn\").click(function () {\n            // Call the downloadDialog method and handle the promise\n            Dialog.downloadDialog()\n                .then((format) => {\n                    console.log(format);\n                    download(format, farmers);\n                })\n                .catch((error) => {\n                    console.error(\"Error:\", error); // Handle any errors that occur\n                });\n        });\n    });\n\n    function download(format, data) {\n        const filename = `FARMER MASTERLIST`;\n        if (format === \"csv\") {\n            downloadCSV(filename, data);\n        } else if (format === \"xlsx\") {\n            downloadExcel(filename, data);\n        } else if (format === \"pdf\") {\n            downloadPDF(filename, data);\n        }\n    }\n\n    function formatHeader(key) {\n        return key\n            .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n            .replace(/_/g, \" \")\n            .replace(/\\b\\w/g, (char) => char.toUpperCase());\n    }\n\n    function escapeCSVValue(value) {\n        if (\n            typeof value === \"string\" &&\n            (value.includes(\",\") || value.includes(\"\\n\") || value.includes('\"'))\n        ) {\n            value = '\"' + value.replace(/\"/g, '\"\"') + '\"';\n        }\n        return value; // Return escaped value\n    }\n\n    function downloadCSV(filename, data) {\n        // Define the header mapping for farmer data\n        const headerMap = {\n            barangayId: \"Barangay\",\n            farmerName: \"Farmer Name\",\n            fieldArea: \"Field Area\",\n            fieldType: \"Field Type\",\n            phoneNumber: \"Phone Number\",\n        };\n\n        // Define the order of headers\n        const headersToInclude = [\n            \"barangayId\",\n            \"farmerName\",\n            \"fieldArea\",\n            \"fieldType\",\n            \"phoneNumber\",\n        ];\n\n        // Map headers to the desired names\n        const headers = headersToInclude.map((key) => headerMap[key]);\n\n        // Helper function to escape CSV values\n        function escapeCSVValue(value) {\n            if (value === undefined || value === null) return \"\";\n            if (\n                typeof value === \"string\" &&\n                (value.includes(\",\") ||\n                    value.includes('\"') ||\n                    value.includes(\"\\n\"))\n            ) {\n                value = `\"${value.replace(/\"/g, '\"\"')}\"`;\n            }\n            return value;\n        }\n\n        // Filter data to match the new headers and format values\n        const csvRows = [\n            headers.join(\",\"), // Add the header row\n            ...data.map((row) =>\n                headersToInclude\n                    .map((key) => {\n                        let value = row[key] !== undefined ? row[key] : \"\"; // Ensure non-null values\n\n                        // Replace 'barangayId' with corresponding barangay name\n                        if (key === \"barangayId\" && value !== \"\") {\n                            value = getBarangayName(value);\n                        }\n\n                        return escapeCSVValue(value);\n                    })\n                    .join(\",\")\n            ),\n        ].join(\"\\n\");\n\n        // Create a Blob and trigger download\n        const blob = new Blob([csvRows], { type: \"text/csv\" });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n\n        // Optional: Log download action\n        addDownload(filename, \"CSV\");\n    }\n\n    function downloadExcel(filename, data) {\n        // Define the header mapping for farmer data\n        const headerMap = {\n            barangayId: \"Barangay\",\n            farmerName: \"Farmer Name\",\n            fieldArea: \"Field Area\",\n            fieldType: \"Field Type\",\n            phoneNumber: \"Phone Number\",\n        };\n\n        // Define the order of headers\n        const headersToInclude = [\n            \"barangayId\",\n            \"farmerName\",\n            \"fieldArea\",\n            \"fieldType\",\n            \"phoneNumber\",\n        ];\n\n        // Map headers to the desired names\n        const mappedHeaders = headersToInclude.map((key) => headerMap[key]);\n\n        // Filter data to match the new headers\n        const filteredData = data.map((row) => {\n            const filteredRow = {};\n            headersToInclude.forEach((key) => {\n                // Replace 'barangayId' with the corresponding barangay name\n                filteredRow[headerMap[key]] =\n                    key === \"barangayId\" ? getBarangayName(row[key]) : row[key];\n            });\n            return filteredRow;\n        });\n\n        // Create a new workbook and add a worksheet\n        const workbook = new ExcelJS.Workbook();\n        const worksheet = workbook.addWorksheet(\"Sheet1\");\n\n        // Add filtered data to the worksheet\n        worksheet.addRow(mappedHeaders);\n        filteredData.forEach((row) => {\n            worksheet.addRow(\n                headersToInclude.map((header) => {\n                    return row[headerMap[header]] !== undefined\n                        ? row[headerMap[header]]\n                        : \"\";\n                })\n            );\n        });\n\n        // Define header and data style\n        const headerStyle = {\n            font: {\n                name: \"Calibri\",\n                size: 12,\n                bold: true,\n                color: { argb: \"FFFFFFFF\" }, // White color\n            },\n            fill: {\n                type: \"pattern\",\n                pattern: \"solid\",\n                fgColor: { argb: \"203764\" },\n            },\n            alignment: { horizontal: \"center\", vertical: \"middle\" },\n            border: {\n                top: { style: \"thin\", color: { argb: \"FF000000\" } }, // Black border\n                right: { style: \"thin\", color: { argb: \"FF000000\" } },\n                bottom: { style: \"thin\", color: { argb: \"FF000000\" } },\n                left: { style: \"thin\", color: { argb: \"FF000000\" } },\n            },\n        };\n\n        const dataStyle = {\n            font: {\n                name: \"Calibri\",\n                size: 11,\n            },\n            alignment: {\n                horizontal: \"center\",\n                vertical: \"middle\",\n                wrapText: true,\n            },\n            border: {\n                top: { style: \"thin\", color: { argb: \"FF000000\" } }, // Black border\n                right: { style: \"thin\", color: { argb: \"FF000000\" } },\n                bottom: { style: \"thin\", color: { argb: \"FF000000\" } },\n                left: { style: \"thin\", color: { argb: \"FF000000\" } },\n            },\n        };\n\n        // Apply style to header row\n        const headerRow = worksheet.getRow(1);\n        headerRow.eachCell({ includeEmpty: true }, (cell) => {\n            cell.style = headerStyle;\n        });\n        headerRow.height = 20; // Set header row height\n\n        // Apply style to data rows\n        worksheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {\n            if (rowNumber > 1) {\n                // Skip header row\n                row.eachCell({ includeEmpty: true }, (cell) => {\n                    cell.style = dataStyle;\n                });\n            }\n        });\n\n        // Set column widths with padding to prevent overflow\n        worksheet.columns = mappedHeaders.map((header) => ({\n            width: Math.max(header.length, 10) + 5, // Ensure minimum width\n        }));\n\n        // Write workbook to browser\n        workbook.xlsx.writeBuffer().then(function (buffer) {\n            const blob = new Blob([buffer], {\n                type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = filename;\n            a.click();\n            URL.revokeObjectURL(url);\n        });\n        addDownload(filename, \"XLSX\");\n    }\n\n    function downloadPDF(filename, data) {\n        const { jsPDF } = window.jspdf;\n        const doc = new jsPDF();\n\n        // Specify the columns you want to include in the PDF for farmer data\n        const columns = [\n            \"barangayId\",\n            \"farmerName\",\n            \"fieldArea\",\n            \"fieldType\",\n            \"phoneNumber\",\n        ];\n        const headers = columns.map(formatHeader);\n\n        // Create the table using only the specified columns\n        doc.autoTable({\n            head: [headers],\n            body: data.map((row) =>\n                columns.map((key) =>\n                    key === \"barangayId\" ? getBarangayName(row[key]) : row[key]\n                )\n            ),\n            theme: \"striped\",\n        });\n\n        // Save the PDF with the season selection in the filename\n        doc.save(filename);\n        addDownload(filename, \"PDF\");\n    }\n\n    function formatHeader(key) {\n        const headerMap = {\n            barangayId: \"Barangay\",\n            farmerName: \"Farmer Name\",\n            fieldArea: \"Field Area\",\n            fieldType: \"Field Type\",\n            phoneNumber: \"Phone Number\",\n        };\n        return headerMap[key] || key;\n    }\n}\n\nexport {\n    Farmer,\n    getFarmer,\n    searchFarmer,\n    farmers,\n    barangayArray,\n    initializeMethodsFarmer,\n    getBarangayId,\n    getBarangayNames,\n};\n","import { processDiseaseData } from \"../classes/Disease.js\";\nimport { processRiceProductionData } from \"../classes/RiceProduction.js\";\nimport { processPestData } from \"../classes/Pest.js\";\nimport { processPriceData } from \"../classes/Price.js\";\nimport { processProductionData } from \"../classes/Production.js\";\nimport { processDamageData } from \"../classes/Damage.js\";\nimport { processSoilHealthData } from \"../classes/SoilHealth.js\";\nimport Dialog from \"../helpers/Dialog.js\";\nimport { user } from \"../HeaderSidebar.js\";\n\n// Record.js\nlet records = [];\n\nclass Record {\n    constructor(\n        recordId,\n        userId,\n        name,\n        season,\n        monthYear,\n        type,\n        fileRecord = \"\"\n    ) {\n        this.recordId = recordId;\n        this.userId = userId;\n        this.name = name;\n        this.season = season;\n        this.type = type;\n        this.monthYear = monthYear;\n        this.fileRecord = fileRecord;\n    }\n\n    async createRecord(record) {\n        const existingRecord = records.find((b) => b.name === record.name);\n        if (existingRecord) {\n            alert(\"Record with the same name already exists\");\n            return;\n        }\n\n        try {\n            const response = await fetch(\"/api/records\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(record),\n            });\n\n            console.log(\"Response Status:\", response.status);\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.log(\"Full Response:\", errorText);\n                throw new Error(\"Failed to create record\");\n            }\n\n            const data = await response.json();\n            console.log(\"Success:\", data);\n            return data.recordId;\n        } catch (error) {\n            console.error(\"Error:\", error);\n            return null;\n        }\n    }\n\n    async updateRecord(updatedRecord) {\n        const existingRecord = records.find(\n            (b) =>\n                b.monthYear === updatedRecord.monthYear &&\n                b.type !== updatedRecord.type\n        );\n        if (existingRecord) {\n            alert(\"Record with the same type already exists\");\n            return;\n        }\n\n        records = records.map((record) =>\n            record.recordId === updatedRecord.recordId\n                ? { ...record, ...updatedRecord }\n                : record\n        );\n\n        try {\n            const response = await fetch(\n                `/api/records/${updatedRecord.recordId}`,\n                {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(updatedRecord),\n                }\n            );\n\n            if (!response.ok) {\n                throw new Error(\"Failed to update record\");\n            }\n\n            const data = await response.json();\n            console.log(\"Success:\", data);\n            return data.recordId;\n        } catch (error) {\n            console.error(\"Error:\", error);\n            return null;\n        }\n    }\n\n    removeRecord(recordId) {\n        fetch(`/api/records/${recordId}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((response) => {\n                if (response.status === 204) {\n                    records = records.filter(\n                        (record) => record.recordId !== record\n                    );\n                    console.log(`Record with ID ${recordId} deleted.`);\n                } else if (response.status === 404) {\n                    console.error(`Record with ID ${recordId} not found.`);\n                } else {\n                    console.error(\n                        `Failed to delete record with ID ${recordId}.`\n                    );\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error:\", error);\n            });\n    }\n}\n\nlet links = \"\";\n\nfunction getRecord(dataType) {\n    // Fetch records from Laravel backend\n    $.ajaxSetup({\n        headers: {\n            \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr(\"content\"),\n        },\n    });\n\n    function getFormattedBase64FileSize(base64String) {\n        // Function to calculate the file size of a base64 string\n        function getBase64FileSize(base64String) {\n            let padding = 0;\n            if (base64String.endsWith(\"==\")) padding = 2;\n            else if (base64String.endsWith(\"=\")) padding = 1;\n\n            let base64StringLength = base64String.length;\n            return (base64StringLength * 3) / 4 - padding;\n        }\n\n        // Function to format the file size\n        function formatFileSize(size) {\n            const units = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\n            let unitIndex = 0;\n            let formattedSize = size;\n\n            while (formattedSize >= 1024 && unitIndex < units.length - 1) {\n                formattedSize /= 1024;\n                unitIndex++;\n            }\n\n            return `${formattedSize.toFixed(2)} ${units[unitIndex]}`;\n        }\n\n        const fileSize = getBase64FileSize(base64String);\n        return formatFileSize(fileSize);\n    }\n\n    $.ajax({\n        url: `/api/records/${dataType}`, // Endpoint to fetch records\n        method: \"GET\",\n        xhrFields: {\n            withCredentials: true, // Ensure cookies are sent with the request\n        },\n        success: async function (response) {\n            console.log(\"Response:\", response);\n\n            if (Array.isArray(response) && response.length > 0) {\n                const recordsArray = response; // Store the array of records in recordsArray\n                records = [];\n\n                // Example: Accessing and logging properties of each record\n                recordsArray.forEach((record) => {\n                    // Calculate and log the file size of the base64-encoded fileRecord\n                    let fileSize = getFormattedBase64FileSize(\n                        record.fileRecord\n                    );\n                    record.fileSize = fileSize;\n\n                    // Convert the base64-encoded fileRecord to a downloadable link\n                    const base64String = record.fileRecord;\n                    const mimeType =\n                        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"; // MIME type for Excel files\n                    const link = `data:${mimeType};base64,${base64String}`;\n\n                    // Create a button with the download link\n                    const button = `<button class=\"btn btn-sm btn-green\" onclick=\"confirmDownload('${link}', '${record.name}.xlsx')\">Download</button>`;\n\n                    record.downloadButton = button;\n                    record.nameString = record.name; // Add name as a normal string\n\n                    records.push(record);\n                });\n\n                // Optionally, update the UI with the new records\n                // Example: $('#recordsTable').html(generateTableHtml(records));\n            } else {\n                console.log(\n                    \"Expected an array of records, but received:\",\n                    response\n                );\n                records = [];\n                console.log(\"Response:\", records);\n            }\n        },\n        error: function (xhr, status, error) {\n            console.error(\"Error fetching records:\", error);\n        },\n    });\n}\n\nwindow.confirmDownload = async function (link, filename) {\n    const res = await Dialog.confirmDialog(\n        \"Download File\",\n        \"Are you sure you want to download this file?\"\n    );\n    if (res.operation === Dialog.OK_OPTION) {\n        const a = document.createElement(\"a\");\n        a.href = link;\n        a.download = filename;\n        a.click();\n    }\n};\n\nfunction searchRecord(searchTerm) {\n    if (!searchTerm) return []; // Return empty if no search term is provided\n\n    const lowerCaseSearchTerm = searchTerm.toLowerCase(); // Convert search term to lowercase for case-insensitive search\n\n    // Filter records based on the search term\n    const foundRecords = records.filter((record) => {\n        // Check only the record name or a specific property you want to search\n        return (\n            record.nameString &&\n            record.nameString.toLowerCase().includes(lowerCaseSearchTerm)\n        );\n    });\n\n    return foundRecords;\n}\n\nfunction initializeMethodsRecord(dataType) {\n    getRecord(dataType);\n\n    var selectedRow = null;\n    var pageSize = 5;\n    var currentPage = 1;\n    var record = null;\n    var isEdit = false;\n\n    async function displayRecords(recordName = null) {\n        // Simulate a delay of 1 second\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n\n        $(\"#recordTableBody\").empty();\n        const userId = user ? user.userId : null;\n        const userRole = user ? user.role : \"admin\";\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = startIndex + pageSize;\n\n        // Filter records based on user role\n        const filteredRecords =\n            userRole === \"admin\"\n                ? records\n                : records.filter((record) => record.userId === userId);\n\n        // If a record name is provided, search for matching records\n        if (recordName) {\n            const foundRecords = searchRecord(recordName).filter((record) =>\n                filteredRecords.some((fr) => fr.recordId === record.recordId)\n            );\n\n            // Apply pagination to the found records\n            const paginatedFoundRecords = foundRecords.slice(\n                startIndex,\n                endIndex\n            );\n\n            if (paginatedFoundRecords.length > 0) {\n                paginatedFoundRecords.forEach((record) => {\n                    $(\"#recordTableBody\").append(`\n                        <tr data-index=${record.recordId}>\n                            <td style=\"display: none;\">${record.recordId}</td>\n                            <td>${record.nameString}</td>\n                            <td>${record.fileSize}</td>\n                            <td>${record.downloadButton}</td>\n                        </tr>\n                    `);\n                });\n            } else {\n                // Handle case where no records are found\n                $(\"#recordTableBody\").append(`\n                    <tr>\n                        <td colspan=\"4\">Record not found!</td>\n                    </tr>\n                `);\n            }\n        } else {\n            // Display paginated records if no recordName is provided\n            const paginatedRecords = filteredRecords.slice(\n                startIndex,\n                endIndex\n            );\n\n            if (paginatedRecords.length > 0) {\n                paginatedRecords.forEach((record) => {\n                    $(\"#recordTableBody\").append(`\n                        <tr data-index=${record.recordId}>\n                            <td style=\"display: none;\">${record.recordId}</td>\n                            <td>${record.nameString}</td>\n                            <td>${record.fileSize}</td>\n                            <td>${record.downloadButton}</td>\n                        </tr>\n                    `);\n                });\n            } else {\n                // Handle case where no records are available\n                $(\"#recordTableBody\").append(`\n                    <tr>\n                        <td colspan=\"4\">No records available!</td>\n                    </tr>\n                `);\n            }\n        }\n    }\n\n    // Display initial records\n    displayRecords();\n\n    $(\"#search\").on(\"input\", function () {\n        let recordName = $(\"#search\").val();\n        displayRecords(recordName);\n    });\n\n    // Pagination: Previous button click handler\n    $(\"#prevBtn\").click(function () {\n        if (currentPage > 1) {\n            currentPage--;\n            displayRecords();\n        }\n    });\n\n    // Pagination: Next button click handler\n    $(\"#nextBtn\").click(function () {\n        var totalPages = Math.ceil(records.length / pageSize);\n        if (currentPage < totalPages) {\n            currentPage++;\n            displayRecords();\n        }\n    });\n\n    function getSeason(month) {\n        console.log(month);\n        month = month.toLowerCase();\n\n        // Define the dry and wet seasons\n        const drySeason = [\"march\", \"april\", \"may\", \"june\", \"july\", \"august\"];\n        const wetSeason = [\n            \"september\",\n            \"october\",\n            \"november\",\n            \"december\",\n            \"january\",\n            \"february\",\n        ];\n\n        // Determine the season based on the month\n        if (drySeason.includes(month)) {\n            return \"Dry\";\n        } else if (wetSeason.includes(month)) {\n            return \"Wet\";\n        } else {\n            return \"Invalid month\";\n        }\n    }\n\n    function updateMonthYear(dataType, requestData) {\n        let urls = [];\n\n        switch (dataType) {\n            case \"riceProduction\":\n                urls = [\"/api/riceProductions/update-year\"];\n                break;\n            case \"production\":\n                urls = [\"/api/productions/update-month-year\"];\n                break;\n            case \"price\":\n                urls = [\"/api/prices/update-month-year\"];\n                break;\n            case \"pestDisease\":\n                urls = [\n                    \"/api/pests/update-month-year\",\n                    \"/api/diseases/update-month-year\",\n                ];\n                break;\n            case \"soilHealth\":\n                urls = [\"/api/soilhealths/update-month-year\"];\n                break;\n            case \"damage\":\n                urls = [\"/api/damages/update-month-year\"];\n                break;\n            default:\n                console.error(\"Unsupported data type\");\n                return;\n        }\n\n        if (urls.length === 0) {\n            console.error(\"No URLs found for the data type\");\n            return;\n        }\n\n        urls.forEach(function (url) {\n            $.ajax({\n                url: url,\n                type: \"POST\",\n                contentType: \"application/json\",\n                data: JSON.stringify(requestData),\n                success: function (response) {\n                    console.log(\"Success:\", response);\n                },\n                error: function (xhr) {\n                    console.error(\"Error:\", xhr.responseText);\n                },\n            });\n        });\n    }\n\n    $(\"#submitBtn\").click(async function (event) {\n        event.preventDefault();\n        var recordId = Number($(\"#recordId\").val());\n        var userId = user.userId;\n        var season = $(\"#seasonPicker select\").val();\n        var type = dataType;\n        var nameInput = $(\"#nameInput\").val();\n        if (dataType === \"riceProduction\") {\n            var year = $(\"#yearPicker select\").val();\n            var monthYear = `${year}`;\n        } else {\n            var month = $(\"#monthPicker select\").val();\n            var year = $(\"#yearPicker select\").val();\n            var monthYear = `${month} ${year}`;\n        }\n\n        var name = `${dataType\n            .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n            .replace(/^./, (str) => str.toUpperCase())}`;\n\n        if (dataType === \"damage\") {\n            name = `${nameInput} ${name}`; // Prepend nameInput to the name\n        }\n\n        // Check if dataType is 'riceProduction' and prepend the season before monthYear if true\n        if (dataType === \"riceProduction\") {\n            name += ` ${season.replace(/^./, (str) => str.toUpperCase())}`; // Capitalize the first letter of season\n        }\n\n        name += ` ${monthYear}`; // Append monthYear at the end\n\n        var fileInput = document.getElementById(\"fileRecord\");\n        var file = fileInput.files[0];\n        let terms = getSearchTerms(dataType);\n\n        try {\n            if (file) {\n                // Validate the search terms asynchronously\n                let isValid = await validateSearchTerms(\n                    file,\n                    terms[0],\n                    terms[4]\n                );\n\n                if (!isValid) {\n                    toastr.success(\"Invalid File Format!\", \"Invalid\", {\n                        timeOut: 5000, // 5 seconds\n                        positionClass: \"toast-top-center\",\n                        toastClass: \"toast-warning\",\n                    });\n                    return;\n                }\n\n                const arrayBuffer = await file.arrayBuffer();\n                const blob = new Blob([arrayBuffer], { type: file.type });\n\n                // Convert Blob to base64 string\n                const readerBase64 = new FileReader();\n                readerBase64.onload = function (e) {\n                    const fileRecord = e.target.result.split(\",\")[1]; // Extract base64 string\n\n                    // Prepare the record object\n                    let record = new Record(\n                        recordId,\n                        userId,\n                        name,\n                        season,\n                        monthYear,\n                        type,\n                        fileRecord\n                    );\n\n                    // Create or update record based on the selectedRow\n                    let recordPromise =\n                        selectedRow !== null && isEdit\n                            ? record.updateRecord(record)\n                            : record.createRecord(record);\n\n                    recordPromise\n                        .then((id) => {\n                            if (id === undefined) {\n                                console.warn(\n                                    \"Record ID is undefined. Skipping further processing.\"\n                                );\n                                return; // Exit the then block\n                            }\n                            processDataBasedOnType(\n                                dataType,\n                                terms[0],\n                                terms[1],\n                                terms[2],\n                                terms[3],\n                                file,\n                                id,\n                                season,\n                                monthYear\n                            );\n                            // Reset form and update UI\n                            $(\"#lblUpload\").text(\"Upload File:\");\n                            $(\"#submitBtn\").text(\"Add record\");\n                            $(\"#cancelBtn\").hide();\n                            $(\"#fileRecord\").attr(\"required\", \"required\");\n                            $(\"#recordForm\")[0].reset();\n                            getRecord(dataType);\n                            displayRecords();\n                            resetFields();\n                            selectedRow = null;\n                        })\n                        .catch((error) => {\n                            console.error(\n                                \"Error creating/updating record:\",\n                                error\n                            );\n                            toastr.error(\"Something went wrong.\", \"Error\", {\n                                timeOut: 5000, // 5 seconds\n                                positionClass: \"toast-center-center\",\n                                toastClass: \"toast-error\", // Custom error color\n                            });\n                        });\n                };\n\n                readerBase64.readAsDataURL(blob);\n            } else {\n                if (selectedRow !== null && isEdit) {\n                    let record = new Record(\n                        recordId,\n                        userId,\n                        name,\n                        season,\n                        monthYear,\n                        type,\n                        \"\"\n                    );\n                    record\n                        .updateRecord(record)\n                        .then(() => {\n                            // Reset form and update UI\n                            $(\"#lblUpload\").text(\"Upload File:\");\n                            $(\"#submitBtn\").text(\"Add record\");\n                            $(\"#cancelBtn\").hide();\n                            $(\"#recordForm\")[0].reset();\n                            $(\"#fileRecord\").attr(\"required\", \"required\");\n                            getRecord(dataType);\n                            const requestData = {\n                                recordId: recordId,\n                                monthYear: monthYear,\n                                season: season,\n                            };\n                            updateMonthYear(dataType, requestData);\n                            displayRecords();\n                            resetFields();\n                            isEdit = false;\n                            selectedRow = null;\n                        })\n                        .catch((error) => {\n                            console.error(\"Error updating record:\", error);\n                            toastr.error(\"Something went wrong.\", \"Error\", {\n                                timeOut: 5000, // 5 seconds\n                                positionClass: \"toast-center-center\",\n                                toastClass: \"toast-error\", // Custom error color\n                            });\n                        });\n                } else {\n                    toastr.success(\"Please select a file first!\", \"Alert\", {\n                        timeOut: 5000, // 5 seconds\n                        positionClass: \"toast-top-center\",\n                        toastClass: \"toast-info\",\n                    });\n                }\n            }\n        } catch (error) {\n            console.error(\"Error during file validation:\", error);\n            toastr.error(\"Something went wrong.\", \"Error\", {\n                timeOut: 5000, // 5 seconds\n                positionClass: \"toast-center-center\",\n                toastClass: \"toast-error\", // Custom error color\n            });\n        }\n    });\n\n    function getSearchTerms(dataType) {\n        let terms;\n        let terms2;\n        let checkFormat;\n        let methodName;\n        let methodName2;\n        switch (dataType) {\n            case \"riceProduction\":\n                checkFormat = \"RICE PRODUCTION MONITORING REPORT\";\n                terms = [\n                    \"Barangay\",\n                    \"Commodity\",\n                    \"Area Planted\",\n                    \"Month Harvested\",\n                    \"Volume of Production\",\n                    \"Average Yield\",\n                ];\n                methodName = processRiceProductionData;\n                break;\n            case \"production\":\n                checkFormat = \"PRODUCTION MONITORING REPORT\";\n                terms = [\n                    \"Barangay\",\n                    \"Commodity\",\n                    \"Variety\",\n                    \"Area Planted\",\n                    \"Month Planted\",\n                    \"Month Harvested\",\n                    \"Volume of Production\",\n                    \"Cost of Production\",\n                    \"Farm Gate Price\",\n                    \"Volume Sold\",\n                ];\n                methodName = processProductionData;\n                break;\n            case \"price\":\n                checkFormat = \"PRICE MONITORING REPORT\";\n                terms = [\"Commodity\", \"Farm Gate Price\"];\n                methodName = processPriceData;\n                break;\n            case \"pestDisease\":\n                checkFormat = \"PEST AND DISEASE MONITORING REPORT\";\n                terms = [\n                    \"Farm Location\",\n                    \"Crops Planted\",\n                    \"Pest Observed\",\n                    \"Total no. of Trees/Plants Planted\",\n                    \"Total no. of Trees/Plants Affected/Damaged\",\n                ];\n                terms2 = [\n                    \"Farm Location\",\n                    \"Crops Planted\",\n                    \"Disease Observed\",\n                    \"Total no. of Trees/Plants Planted\",\n                    \"Total no. of Trees/Plants Affected/Damaged\",\n                ];\n                methodName = processPestData;\n                methodName2 = processDiseaseData;\n                break;\n            case \"soilHealth\":\n                checkFormat = \"SOIL HEALTH MONITORING REPORT\";\n                terms = [\n                    \"Barangay\",\n                    \"Farmer\",\n                    \"Field Type\",\n                    \"Nitrogen\",\n                    \"Phosphorus\",\n                    \"Potassium\",\n                    \"pH\",\n                    \"General Fertility\",\n                    \"Recommendations\",\n                ];\n                methodName = processSoilHealthData;\n                break;\n            case \"damage\":\n                checkFormat = \"DAMAGE MONITORING REPORT\";\n                terms = [\n                    \"Barangay\",\n                    \"Commodity\",\n                    \"Variety\",\n                    \"Number of Farmers Affected\",\n                    \"Total Area affected\",\n                    \"Yield Loss\",\n                    \"Grand Total Value\",\n                ];\n                methodName = processDamageData;\n                break;\n            default:\n                console.error(\"Unknown data type\");\n        }\n\n        return [terms, terms2, methodName, methodName2, checkFormat];\n    }\n\n    function validateSearchTerms(file, searchTerms, checkFormat) {\n        searchTerms.push(checkFormat);\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onload = function (event) {\n                try {\n                    const data = event.target.result;\n                    const workbook = XLSX.read(new Uint8Array(data), {\n                        type: \"array\",\n                    });\n\n                    // Normalize the search terms\n                    const normalizedSearchTerms =\n                        searchTerms.map(normalizeString);\n\n                    // Create a Set to keep track of found search terms\n                    const foundTerms = new Set();\n\n                    // Iterate through each sheet in the workbook\n                    for (let sheetName of workbook.SheetNames) {\n                        const worksheet = workbook.Sheets[sheetName];\n                        const range = XLSX.utils.decode_range(\n                            worksheet[\"!ref\"]\n                        );\n\n                        // Iterate through each row in the sheet\n                        for (\n                            let rowNum = range.s.r;\n                            rowNum <= range.e.r;\n                            rowNum++\n                        ) {\n                            // Iterate through each cell in the row\n                            for (\n                                let colNum = range.s.c;\n                                colNum <= range.e.c;\n                                colNum++\n                            ) {\n                                const cellAddress = XLSX.utils.encode_cell({\n                                    r: rowNum,\n                                    c: colNum,\n                                });\n                                const cell = worksheet[cellAddress];\n\n                                if (cell && cell.v) {\n                                    const cellValue = cell.v;\n                                    if (\n                                        cellMatchesSearchTerms(\n                                            cellValue,\n                                            normalizedSearchTerms\n                                        )\n                                    ) {\n                                        normalizedSearchTerms.forEach(\n                                            (term) => {\n                                                if (\n                                                    cellMatchesSearchTerms(\n                                                        cellValue,\n                                                        [term]\n                                                    )\n                                                ) {\n                                                    foundTerms.add(term);\n                                                }\n                                            }\n                                        );\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    console.log(foundTerms);\n                    // Check if all search terms are found\n                    const allTermsFound = normalizedSearchTerms.every((term) =>\n                        foundTerms.has(term)\n                    );\n                    resolve(allTermsFound);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            reader.onerror = function (event) {\n                reject(event.target.error);\n            };\n\n            reader.readAsArrayBuffer(file);\n        });\n    }\n\n    function processDataBasedOnType(\n        dataType,\n        searchTerms,\n        searchTerms2,\n        methodName,\n        methodName2,\n        file,\n        id,\n        season,\n        monthYear\n    ) {\n        const reader = new FileReader();\n        reader.onload = function (event) {\n            const data = event.target.result;\n            const workbook = XLSX.read(data, { type: \"binary\" });\n            if (dataType === \"pestDisease\") {\n                extractData(\n                    workbook,\n                    searchTerms,\n                    methodName,\n                    id,\n                    season,\n                    monthYear\n                );\n                extractData(\n                    workbook,\n                    searchTerms2,\n                    methodName2,\n                    id,\n                    season,\n                    monthYear\n                );\n            } else {\n                extractData(\n                    workbook,\n                    searchTerms,\n                    methodName,\n                    id,\n                    season,\n                    monthYear\n                );\n            }\n        };\n        reader.readAsBinaryString(file);\n    }\n\n    // Normalize search term: remove whitespace and convert to lowercase\n    function normalizeString(str) {\n        if (typeof str !== \"string\") {\n            str = String(str);\n        }\n        return str.toLowerCase();\n    }\n\n    // Check if a cell matches any search term (case insensitive and whole word match)\n    function cellMatchesSearchTerms(cellValue, searchTerms) {\n        const normalizedCellValue = normalizeString(cellValue);\n        return searchTerms.some((term) => {\n            const normalizedTerm = normalizeString(term);\n            // Create a regex to match whole words only\n            const regex = new RegExp(`\\\\b${normalizedTerm}\\\\b`, \"i\");\n            return regex.test(normalizedCellValue);\n        });\n    }\n\n    // Extract data from the workbook and search for terms\n    function extractData(\n        workbook,\n        searchTerms,\n        processFunction,\n        id,\n        season,\n        monthYear\n    ) {\n        // Normalize the search terms\n        let headers = {};\n        const normalizedSearchTerms = searchTerms.map(normalizeString);\n\n        // Iterate through each sheet in the workbook\n        workbook.SheetNames.forEach((sheetName) => {\n            const worksheet = workbook.Sheets[sheetName];\n            const range = XLSX.utils.decode_range(worksheet[\"!ref\"]);\n\n            // Iterate through each row in the sheet\n            for (let rowNum = range.s.r + 1; rowNum <= range.e.r; rowNum++) {\n                // Iterate through each cell in the row\n                for (let colNum = range.s.c; colNum <= range.e.c; colNum++) {\n                    const cellAddress = XLSX.utils.encode_cell({\n                        r: rowNum,\n                        c: colNum,\n                    });\n                    const cell = worksheet[cellAddress];\n\n                    if (\n                        cell &&\n                        cell.v &&\n                        cellMatchesSearchTerms(cell.v, normalizedSearchTerms)\n                    ) {\n                        // Pass additional data to display function\n                        headers[cell.v] = cellAddress;\n                    }\n                }\n            }\n        });\n\n        // Call the specific process function based on the data type\n        const rowsArray = processFunction(\n            workbook,\n            headers,\n            id,\n            season,\n            monthYear\n        );\n    }\n\n    function resetFields() {\n        // Reset UI states\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n        selectedRow = null;\n        $(\"#recordTableBody tr\").removeClass(\"selected-row\");\n    }\n\n    $(\"#editBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Edit\",\n            \"Are you sure you want to edit this record?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            // Proceed with the edit\n            $(\"#dataEdit\").text(\"record\");\n            $(\"#cancelBtn\").show();\n            $(\"#recordId\").val(record.recordId);\n            isEdit = true;\n            // Assuming record.monthYear is like 'July 2024'\n            var monthYear = record.monthYear;\n\n            // Split the monthYear into month and year\n            var parts = monthYear.split(\" \");\n            var month = parts[0]; // 'July'\n            var year = parts[1]; // '2024'\n            var season = record.season; // 'July'\n\n            // Set the values in the input fields\n            $(\"#seasonPicker select\").val(season);\n            $(\"#monthPicker select\").val(month);\n            $(\"#yearPicker select\").val(year);\n\n            if (dataType === \"riceProduction\") {\n                var year = record.monthYear; // '2024'\n                $(\"#yearPicker select\").val(year);\n            }\n            $(\"#fileRecord\").removeAttr(\"required\");\n            $(\"#lblUpload\").text(\"Insert New File (optional):\");\n            $(\"#submitBtn\").text(\"Update Record\");\n        } else {\n            // If Cancel is clicked, do nothing or add additional handling if needed\n            console.log(\"Edit action was canceled.\");\n        }\n        $(\"#recordTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n\n    $(\"#cancelEdit\").click(function () {\n        resetFields();\n    });\n\n    // Cancel button click handler\n    $(\"#cancelBtn\").click(function () {\n        selectedRow = null;\n        $(\"#lblUpload\").text(\"Upload File:\");\n        $(\"#submitBtn\").text(\"Add Record\");\n        $(\"#fileRecord\").attr(\"required\", \"required\");\n        $(\"#cancelBtn\").hide();\n        $(\"#recordTableBody tr\").removeClass(\"selected-row\");\n        $(\"#editBtn\").prop(\"disabled\", true);\n        $(\"#deleteBtn\").prop(\"disabled\", true);\n    });\n    $(\"#deleteBtn\").click(async function () {\n        // Open the confirmation dialog\n        const result = await Dialog.confirmDialog(\n            \"Confirm Deletion\",\n            \"Are you sure you want to delete this record?\"\n        );\n\n        // Check if the user clicked OK\n        if (result.operation === 1) {\n            // Proceed with deletion\n            let recordToDelete = new Record();\n            recordToDelete.removeRecord(record.recordId);\n            getRecord(dataType);\n            displayRecords();\n            resetFields();\n        } else {\n            // If Cancel is clicked, do nothing or add additional handling if needed\n            console.log(\"Delete action was canceled.\");\n            $(\"#editBtn\").prop(\"disabled\", true);\n            $(\"#deleteBtn\").prop(\"disabled\", true);\n        }\n    });\n\n    $(\"#cancelDelete\").click(function () {\n        resetFields();\n    });\n\n    // Row click handler (for selecting rows)\n    $(\"#recordTableBody\").on(\"click\", \"tr\", function () {\n        var $this = $(this);\n        var recordId = $this.data(\"index\");\n        record = records.find((u) => u.recordId === recordId);\n        selectedRow = recordId;\n        // Highlight selected row\n        if (selectedRow !== null) {\n            $(\"#recordTableBody tr\").removeClass(\"selected-row\");\n            $(\"#recordTableBody tr\")\n                .filter(function () {\n                    return (\n                        parseInt($(this).find(\"td:eq(0)\").text(), 10) ===\n                        selectedRow\n                    );\n                })\n                .addClass(\"selected-row\");\n            $(\"#editBtn\").prop(\"disabled\", false);\n            $(\"#deleteBtn\").prop(\"disabled\", false);\n        } else {\n            $(\"#recordTableBody tr\").removeClass(\"selected-row\");\n        }\n    });\n}\n\nexport { Record, getRecord, searchRecord, records, initializeMethodsRecord };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","user","_regeneratorRuntime","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","$","document","ready","showLoadingScreen","fadeIn","setTimeout","fadeOut","getCsrfToken","_getCsrfToken","_callee4","_context4","attr","requestCsrfCookie","_requestCsrfCookie","_callee5","_context5","ajax","url","xhrFields","withCredentials","checkToken","_checkToken","_callee6","token","_context6","headers","_initialize","_callee7","response","_context7","message","load","window","location","href","t0","console","error","loadContent","_x","_loadContent","_callee2","_context2","concat","loadDefaultContent","_loadDefaultContent","_callee3","hash","modulePath","_context3","setActiveLink","selector","removeClass","addClass","prepend","username","on","links","icon","text","role","link","append","initializeSidebar","_ref","_callee","event","_context","preventDefault","stopPropagation","Dialog","confirmDialog","operation","OK_OPTION","success","toastr","timeOut","positionClass","toastClass","xhr","responseJSON","_x2","this","closest","initialize","_defineProperties","_toPropertyKey","key","_defineProperty","toPrimitive","String","Number","_toPrimitive","_classCallCheck","_confirmDialog","textTitle","textMessage","inputDialog","title","divButtons","btnOk","btnCancel","dialogData","createElement","setAttribute","innerText","open","showModal","innerHTML","addEventListener","close","remove","_changePasswordDialog","form","newPasswordInput","confirmPasswordInput","btnSave","errorMessage","style","color","body","newPassword","validatePasswords","trim","confirmPassword","test","_x3","_x4","_showCropModal","cropImg","description","cropTitle","varietyDetails","modal","width","padding","textAlign","borderRadius","sort","b","totalAreaPlanted","map","variety","index","varietyName","size","flavor","growthConditions","pestDiseaseResistance","recommendedPractices","join","cropInfoContent","querySelector","varietyContent","target","classList","add","_x5","_x6","_x7","_x8","_downloadDialog","modalContent","btnCSV","btnExcel","btnPDF","closeButton","resolvePromise","formatPromise","maxWidth","boxShadow","className","button","format","currentTarget","getAttribute","appendChild","_showInfoModal","htmlScript","container","btnClose","btnWrapper","fontSize","margin","display","flexDirection","alignItems","gap","justifyContent","_x9","crops","getCrop","ajaxSetup","log","status","cropVarieties","getCropVarieties","barangays","getBarangay","farmers","getFarmer","confirmDownload","filename","download","click","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","definition","get","obj","prop"],"sourceRoot":""}