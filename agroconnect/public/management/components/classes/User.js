let users=[];class User{constructor(e,s,r,t,o,n=""){this.userId=e;this.firstName=s;this.lastName=r;this.username=t;this.role=o;this.password=n}createUser(s){const e=users.find(e=>e.username===s.username);if(e){alert("Username already exists");return}fetch("/api/users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}).then(e=>e.json()).then(e=>{})["catch"](e=>{console.error("Error:",e)})}updateUser(s){const e=users.find(e=>e.username===s.username);if(e&&e.userId!==s.userId){alert("Username already exists");return}users=users.map(e=>e.userId===s.userId?{...e,...s}:e);fetch(`/api/users/${s.userId}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}).then(e=>e.json()).then(e=>{})["catch"](e=>{console.error("Error:",e)})}removeUser(s){fetch(`/api/users/${s}`,{method:"DELETE",headers:{"Content-Type":"application/json"}}).then(e=>{if(e.status===204){users=users.filter(e=>e.userId!==s);}else if(e.status===404){console.error(`User with ID ${s} not found.`)}else{console.error(`Failed to delete user with ID ${s}.`)}})["catch"](e=>{console.error("Error:",e)})}}function getUser(){$.ajaxSetup({headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")}});$.ajax({url:"/api/users",method:"GET",success:function(e){let s=e;users=s;},error:function(e,s,r){console.error("Error fetching users:",r)}})}getUser();function searchUser(e){const s=e.toLowerCase();const r=users.filter(e=>{return Object.values(e).some(e=>e&&e.toString().toLowerCase().includes(s))});return r}export{User,getUser,searchUser,users};