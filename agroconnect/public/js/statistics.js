function parseDate(e){return new Date(e).getFullYear()}function calculateYearlyAverages(a){return Object.keys(a).map(e=>{const t=a[e].reduce((e,t)=>e+t,0);return t/a[e].length})}function calculateMonthlyAverages(o){const n=[];Object.keys(o).forEach(e=>{const t=o[e];const a=t.reduce((e,t)=>e+t,0);const r=a/t.length;n.push(r)});return n}function calculateZScoresForGrowthRates(e,t){const a=t.reduce((e,t)=>e+t,0)/t.length;const r=Math.sqrt(t.map(e=>Math.pow(e-a,2)).reduce((e,t)=>e+t,0)/t.length);const o=t.map(e=>(e-a)/r);const n=o.reduce((e,t)=>e+t,0)/o.length;return{growthRateZScores:o,meanGrowthRateZScore:n}}function interpretPerformance(e){if(e>2)return"Excellent";if(e>1)return"Good";if(e>0)return"Average";if(e>-1)return"Below Average";return"Poor"}function interpretPerformanceScore(e){let t=0;if(e>=30){t=100}else if(e>=10){t=80}else if(e>=0){t=60}else if(e>=-20){t=40}else{t=20}return t}function parsePrice(e){const t=e.match(/^(\d+(\.\d+)?)\/pc$/);const a=e.match(/^(\d+(\.\d+)?)\/bundle$/);if(typeof e==="string"&&e.includes("-")){const[r,o]=e.split("-").map(parseFloat);return(r+o)/2}if(t){const n=parseFloat(t[1]);const c=.2;return n/c}else if(a){const s=parseFloat(a[1]);const l=1;return s/l}else{return parseFloat(e)}}function UsageLevelFrequency(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{let{monthHarvested:a,cropName:r,volumeSold:o,volumeProduction:n,season:c}=t;if(a.includes("-")){const s=a.split("-");a=s[1].trim()}if(!e[a]){e[a]={}}if(!e[a][c]){e[a][c]={}}if(!e[a][c][r]){e[a][c][r]={totalProduction:0,totalSold:0,usageLevel:0}}e[a][c][r].totalProduction+=n;e[a][c][r].totalSold+=o;return e},{});return Object.entries(t).flatMap(([o,e])=>Object.entries(e).flatMap(([r,e])=>Object.entries(e).map(([e,{totalProduction:t,totalSold:a}])=>({monthYear:o,season:r,cropName:e,totalProduction:t,totalSold:a,usageLevel:parseFloat((a/t).toFixed(2))}))))}function countAverageAreaPlanted(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{let{monthHarvested:a,cropName:r,season:o,areaPlanted:n}=t;if(a.includes("-")){const c=a.split("-");a=c[1].trim()}if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={season:o,totalPlanted:0,areaPlanted:0}}e[a][r].totalPlanted++;e[a][r].areaPlanted+=n;return e},{});return Object.entries(t).flatMap(([o,e])=>Object.entries(e).map(([e,{season:t,totalPlanted:a,areaPlanted:r}])=>({monthYear:o,cropName:e,season:t,totalPlanted:a,areaPlanted:parseFloat((r/a).toFixed(2))})))}function countAverageAreaPlantedBarangay(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{barangay:a,cropName:r,season:o,areaPlanted:n}=t;if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={season:o,totalPlanted:0,areaPlanted:0}}e[a][r].totalPlanted++;e[a][r].areaPlanted+=n;return e},{});return Object.entries(t).flatMap(([o,e])=>Object.entries(e).map(([e,{season:t,totalPlanted:a,areaPlanted:r}])=>({barangay:o,cropName:e,season:t,totalPlanted:a,areaPlanted:parseFloat((r/a).toFixed(2))})))}function averageVolumeProduction(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{let{monthHarvested:a,cropName:r,season:o,volumeProduction:n,areaPlanted:c}=t;if(a.includes("-")){const s=a.split("-");a=s[1].trim()}if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={season:o,totalVolume:0,totalArea:0}}e[a][r].totalVolume+=n;e[a][r].totalArea+=c;return e},{});let a=Object.entries(t).flatMap(([o,e])=>Object.entries(e).map(([e,{season:t,totalVolume:a,totalArea:r}])=>({monthYear:o,cropName:e,season:t,totalVolume:parseFloat(a.toFixed(2)),totalArea:parseFloat(r.toFixed(2)),volumeProductionPerHectare:parseFloat((a/r).toFixed(2))})));return a}function averageVolumeProductionBarangay(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{barangay:a,cropName:r,volumeProduction:o,areaPlanted:n,season:c}=t;if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={totalVolume:0,totalArea:0,count:0,season:""}}e[a][r].totalVolume+=o;e[a][r].totalArea+=n;e[a][r].count++;e[a][r].season=c;return e},{});return Object.entries(t).flatMap(([n,e])=>Object.entries(e).map(([e,{season:t,totalVolume:a,totalArea:r,count:o}])=>({barangay:n,cropName:e,season:t,totalVolume:a.toFixed(2),totalArea:r.toFixed(2),volumeProductionPerHectare:r>0?parseFloat((a/r).toFixed(2)):0})))}function averagePrice(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{monthYear:a,cropName:r,season:o,price:n}=t;let c=0;c=parsePrice(n);if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={season:o,price:0,count:0}}e[a][r].price+=c;e[a][r].count+=1;return e},{});return Object.entries(t).flatMap(([o,e])=>Object.entries(e).map(([e,{season:t,price:a,count:r}])=>({monthYear:o,cropName:e,season:t,price:parseFloat((a/r).toFixed(2))})))}function countPestOccurrence(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{monthYear:a,cropName:r,season:o,pestName:n,totalPlanted:c,totalAffected:s}=t;if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={season:o,pestOccurrences:{},totalOccurrence:0,totalPlanted:c,totalAffected:s}}if(!e[a][r].pestOccurrences[n]){e[a][r].pestOccurrences[n]=0}e[a][r].pestOccurrences[n]++;e[a][r].totalOccurrence++;return e},{});return Object.entries(t).flatMap(([s,e])=>Object.entries(e).map(([e,{season:t,pestOccurrences:a,totalOccurrence:r,totalPlanted:o,totalAffected:n}])=>{const c=n/o*100;return{monthYear:s,cropName:e,season:t,totalAffected:n,totalPlanted:o,percentage:parseFloat(c.toFixed(2)),totalOccurrence:r,pestOccurrences:Object.entries(a).map(([e,t])=>({pestName:e,occurrence:t}))}}))}function countPestOccurrenceBarangay(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{barangay:a,cropName:r,season:o}=t;if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={}}if(!e[a][r][o]){e[a][r][o]=0}e[a][r][o]++;return e},{});return Object.entries(t).flatMap(([r,e])=>Object.entries(e).flatMap(([a,e])=>Object.entries(e).map(([e,t])=>({barangay:r,cropName:a,season:e,pestOccurrence:t}))))}function countDiseaseOccurrence(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{monthYear:a,cropName:r,season:o,diseaseName:n,totalPlanted:c,totalAffected:s}=t;if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={season:o,diseaseOccurrences:{},totalOccurrence:0,totalPlanted:c,totalAffected:s}}if(!e[a][r].diseaseOccurrences[n]){e[a][r].diseaseOccurrences[n]=0}e[a][r].diseaseOccurrences[n]++;e[a][r].totalOccurrence++;return e},{});return Object.entries(t).flatMap(([s,e])=>Object.entries(e).map(([e,{season:t,diseaseOccurrences:a,totalOccurrence:r,totalPlanted:o,totalAffected:n}])=>{const c=n/o*100;return{monthYear:s,cropName:e,season:t,totalAffected:n,totalPlanted:o,percentage:parseFloat(c.toFixed(2)),totalOccurrence:r,diseaseOccurrences:Object.entries(a).map(([e,t])=>({diseaseName:e,occurrence:t}))}}))}function countDiseaseOccurrenceBarangay(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{barangay:a,cropName:r,season:o}=t;if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={}}if(!e[a][r][o]){e[a][r][o]=0}e[a][r][o]++;return e},{});return Object.entries(t).flatMap(([r,e])=>Object.entries(e).flatMap(([a,e])=>Object.entries(e).map(([e,t])=>({barangay:r,cropName:a,season:e,diseaseOccurrence:t}))))}function priceIncomePerHectare(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{let{monthHarvested:a,cropName:r,season:o,volumeSold:n,areaPlanted:c,price:s}=t;if(a.includes("-")){const u=a.split("-");a=u[1].trim()}if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={season:o,totalIncome:0,totalArea:0}}let l=parsePrice(s);let i=n*1e3;e[a][r].totalIncome+=i*l;e[a][r].totalArea+=c;return e},{});return Object.entries(t).flatMap(([o,e])=>Object.entries(e).map(([e,{season:t,totalIncome:a,totalArea:r}])=>({monthYear:o,cropName:e,season:t,totalIncome:parseFloat(a.toFixed(2)),totalArea:parseFloat(r.toFixed(2)),incomePerHectare:r>0?parseFloat((a/r).toFixed(2)):0})))}function priceIncomePerHectareBarangay(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{barangay:a,cropName:r,volumeSold:o,areaPlanted:n,price:c,season:s}=t;if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={totalIncome:0,totalArea:0,season:""}}let l=parsePrice(c);let i=o*1e3;e[a][r].totalIncome+=i*l;e[a][r].totalArea+=n;e[a][r].season=s;return e},{});return Object.entries(t).flatMap(([o,e])=>Object.entries(e).map(([e,{season:t,totalIncome:a,totalArea:r}])=>({barangay:o,cropName:e,season:t,totalIncome:parseFloat(a.toFixed(2)),totalArea:parseFloat(r.toFixed(2)),incomePerHectare:r>0?parseFloat((a/r).toFixed(2)):0})))}function profitPerHectare(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{let{monthHarvested:a,cropName:r,season:o,volumeSold:n,areaPlanted:c,price:s,productionCost:l}=t;if(a.includes("-")){const d=a.split("-");a=d[1].trim()}if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={season:o,totalIncome:0,totalArea:0,totalProductionCost:0,count:0}}let i=parsePrice(s);let u=n*1e3;e[a][r].totalIncome+=u*i;e[a][r].totalArea+=c;e[a][r].totalProductionCost+=l;e[a][r].count+=1;return e},{});return Object.entries(t).flatMap(([c,e])=>Object.entries(e).map(([e,{season:t,totalIncome:a,totalArea:r,totalProductionCost:o,count:n}])=>({monthYear:c,cropName:e,season:t,totalIncome:parseFloat(a.toFixed(2)),totalArea:parseFloat(r.toFixed(2)),totalProductionCost:parseFloat(o.toFixed(2)),totalProfit:r>0?parseFloat((a-o).toFixed(2)):0,profitPerHectare:r>0?parseFloat(((a-o)/r).toFixed(2)):0})))}function profitPerHectareBarangay(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{barangay:a,cropName:r,volumeSold:o,areaPlanted:n,price:c,productionCost:s,season:l}=t;if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={totalIncome:0,totalArea:0,totalProductionCost:0,season:""}}let i=parsePrice(c);let u=o*1e3;e[a][r].totalIncome+=u*i;e[a][r].totalArea+=n;e[a][r].totalProductionCost+=s;e[a][r].season=l;return e},{});return Object.entries(t).flatMap(([n,e])=>Object.entries(e).map(([e,{season:t,totalIncome:a,totalArea:r,totalProductionCost:o}])=>({barangay:n,cropName:e,season:t,totalIncome:parseFloat(a.toFixed(2)),totalArea:parseFloat(r.toFixed(2)),totalProductionCost:parseFloat(o.toFixed(2)),profitPerHectare:r>0?parseFloat(((a-o)/r).toFixed(2)):0})))}function calculateDamages(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{monthYear:a,cropName:r,season:o,yieldLoss:n,numberOfFarmers:c,areaAffected:s,grandTotalValue:l}=t;if(!e[a]){e[a]={}}if(!e[a][r]){e[a][r]={season:o,totalFarmers:0,totalAreaAffected:0,totalGrandValue:0,totalYieldLoss:0,count:0}}e[a][r].totalYieldLoss+=parseFloat(n);e[a][r].totalFarmers+=parseInt(c,10);e[a][r].totalAreaAffected+=parseFloat(s);e[a][r].totalGrandValue+=parseFloat(l);e[a][r].count++;return e},{});return Object.entries(t).flatMap(([l,e])=>Object.entries(e).map(([e,{season:t,totalYieldLoss:a,totalFarmers:r,totalAreaAffected:o,totalGrandValue:n,count:c}])=>{const s=c>0?parseFloat((a/c).toFixed(2)):0;return{monthYear:l,cropName:e,season:t,totalFarmers:r,totalAreaAffected:parseFloat(o.toFixed(2)),totalGrandValue:parseFloat(n.toFixed(2)),averageYieldLoss:s}}))}function calculateDamagePerBarangay(e){if(!Array.isArray(e)){console.error("Expected data to be an array");return[]}const t=e.reduce((e,t)=>{const{barangay:a,cropName:r,season:o,yieldLoss:n,numberOfFarmers:c,areaAffected:s,grandTotalValue:l}=t;const i=a.replace(/Brgy\.?\s*|\s*[,\.]$/g,"").replace(/\s*Cabuyao\s*/i,"").replace(/[^\w\s-]/g,"").replace(/\s+/g," ").trim();if(!e[i]){e[i]={}}if(!e[i][r]){e[i][r]={season:o,totalFarmers:0,totalAreaAffected:0,totalGrandValue:0,totalYieldLoss:0,count:0}}e[i][r].totalYieldLoss+=parseFloat(n);e[i][r].totalFarmers+=parseInt(c,10);e[i][r].totalAreaAffected+=parseFloat(s);e[i][r].totalGrandValue+=parseFloat(l);e[i][r].count++;return e},{});return Object.entries(t).flatMap(([l,e])=>Object.entries(e).map(([e,{season:t,totalYieldLoss:a,totalFarmers:r,totalAreaAffected:o,totalGrandValue:n,count:c}])=>{const s=o>0?parseFloat((a/o*100).toFixed(2)):0;return{barangay:l,cropName:e,season:t,totalFarmers:r,totalAreaAffected:parseFloat(o.toFixed(2)),totalGrandValue:parseFloat(n.toFixed(2)),damagePercentage:s}}))}function getCropData(e,t,a,r,o,n){if(!Array.isArray(e)||!Array.isArray(t)||!Array.isArray(a)||!Array.isArray(r)){console.error("Expected all inputs to be arrays");return[]}const i=o.reduce((e,t)=>{if(!e[t.cropName]){e[t.cropName]=t.cropType}return e},{});const c=e.filter(e=>{const t=i[e.cropName];return t===n});const s=t.filter(e=>i[e.cropName]===n);const l=a.filter(e=>i[e.cropName]===n);const u=r.filter(e=>i[e.cropName]===n);const d=new Map;c.forEach(e=>{const{cropName:t,areaPlanted:a,volumeSold:r,volumeProduction:o,price:n,productionCost:c}=e;const s=t;if(!d.has(s)){d.set(s,{cropName:t,cropType:i[t],totalPlanted:0,totalArea:0,totalVolume:0,price:0,pestOccurrence:0,diseaseOccurrence:0,totalIncome:0,totalProfit:0})}const l=d.get(s);l.totalPlanted+=1||0;l.totalVolume+=o||0;l.totalArea+=a||0;l.totalIncome+=(r*1e3||0)*parsePrice(n);l.totalProfit+=(r*1e3||0)*(parsePrice(n)||0)-(c||0)});s.forEach(e=>{const{cropName:a,price:t}=e;const r=parsePrice(t);d.forEach((e,t)=>{if(t===a){if(!e.totalPrice){e.totalPrice=0;e.count=0}e.totalPrice+=r;e.count+=1}})});l.forEach(e=>{const{cropName:a}=e;d.forEach((e,t)=>{if(t===a){e.pestOccurrence+=1}})});u.forEach(e=>{const{cropName:a}=e;d.forEach((e,t)=>{if(t===a){e.diseaseOccurrence+=1}})});d.forEach((e,t)=>{if(e.count>0){e.price=e.totalPrice/e.count;delete e.totalPrice;delete e.count}});return Array.from(d.values())}async function getRiceCropData(e){if(!Array.isArray(e)){console.error("Expected production to be an array");return[]}let t=0;let a=0;const r=e.filter(e=>{return e.cropName==="Rice"});r.forEach(e=>{t+=e.areaPlanted||0;a+=e.volumeProduction||0});const o=t>0?a/t:0;return[{cropName:"Rice",cropType:"Rice",totalArea:t,totalVolume:a,averageYield:o}]}export{countAverageAreaPlanted,averageVolumeProduction,averagePrice,UsageLevelFrequency,countPestOccurrence,countDiseaseOccurrence,priceIncomePerHectare,profitPerHectare,getCropData,parseDate,calculateYearlyAverages,calculateZScoresForGrowthRates,interpretPerformance,interpretPerformanceScore,countAverageAreaPlantedBarangay,averageVolumeProductionBarangay,countPestOccurrenceBarangay,countDiseaseOccurrenceBarangay,priceIncomePerHectareBarangay,profitPerHectareBarangay,calculateMonthlyAverages,getRiceCropData,calculateDamages,calculateDamagePerBarangay};