import Dialog from"../helpers/Dialog.js";import{addDownload,getYearRange}from"../../../js/fetch.js";let soilHealths=[];class SoilHealth{constructor(t,e,o,n,a,r,s,l,i,c,d,h){this.recordId=t;this.barangay=e;this.farmer=o;this.fieldType=n;this.nitrogenContent=a;this.phosphorusContent=r;this.potassiumContent=s;this.pH=l;this.generalRating=i;this.recommendations=c;this.season=d;this.monthYear=h}async addSoilHealth(t){function e(e,o){const n=[];for(let t=0;t<e.length;t+=o){n.push(e.slice(t,t+o))}return n}const o=20;const n=t.length;const a=e(t,o);let r=0;const s=(t,e)=>{$("#progressMessage").text(`Uploading ${t}-${e}/${n}`)};$("#loader").show();$("body").addClass("no-scroll");for(const[i,c]of a.entries()){const d=r+1;const h=d+c.length-1;s(d,h);try{await $.ajax({url:"/api/soilhealths-batch",method:"POST",data:{soilHealthData:c,_token:$('meta[name="csrf-token"]').attr("content")}});r+=c.length}catch(l){console.error(`Error sending batch ${i+1}:`,l.responseText)}}$("#loader").hide();$("body").removeClass("no-scroll");toastr.success("File uploaded successfully!","Success",{timeOut:5e3,positionClass:"toast-top-center",toastClass:"toast-success-custom"});getSoilHealth()}updateSoilHealth(e){const t=soilHealthData.find(t=>t.recordId===e.recordId);if(t&&t.recordId!==e.recordId){alert("Soil Health record ID already exists");return}soilHealths=soilHealths.map(t=>t.recordId===e.recordId?{...t,...e}:t);fetch(`/api/soilhealths/${e.recordId}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(t=>t.json()).then(t=>{})["catch"](t=>{console.error("Error:",t)});getSoilHealth()}removeSoilHealth(t){$.ajax({url:"/api/soilhealthsByRecords",method:"DELETE",data:{soilHealthData:t,_token:$('meta[name="csrf-token"]').attr("content")},success:function(t){},error:function(t){console.error(t.responseText)}});getSoilHealth()}}function getSoilHealth(){$.ajaxSetup({headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")}});$.ajax({url:"/api/soilhealths",method:"GET",success:function(t){soilHealths=t;},error:function(t,e,o){console.error("Error fetching soil health data:",o)}})}function initializeMethodsSoilHealth(){function s(t){const e=t.toLowerCase();const o=soilHealths.filter(t=>{return Object.values(t).some(t=>t.toString().toLowerCase().includes(e))});return o}var l=5;var i=1;async function e(t=null){await new Promise(t=>setTimeout(t,1e3));$("#soilHealthTableBody").empty();var e=(i-1)*l;var o=e+l;const n=t?s(t):soilHealths;if(n.length>0){for(var a=e;a<o;a++){if(a>=n.length){break}var r=n[a];$("#soilHealthTableBody").append(`
            <tr data-index=${r.recordId}>
              <td>${r.barangay}</td>
              <td>${r.farmer}</td>
              <td>${r.fieldType}</td>
              <td>${r.nitrogenContent}</td>
              <td>${r.phosphorusContent}</td>
              <td>${r.potassiumContent}</td>
              <td>${r.pH}</td>
              <td>${r.generalRating}</td>
              <td>${r.recommendations}</td>
              <td>${r.season}</td>
              <td>${r.monthYear}</td>
            </tr>
          `)}}else{$("#soilHealthTableBody").append(`
          <tr>
            <td colspan="10">No results found!</td>
          </tr>
        `)}$("#soilHealthTable").trigger("update")}$("#search").on("input",function(){let t=$("#search").val();e(t)});$("#prevBtn").click(function(){if(i>1){i--;e($("#search").val())}});$("#nextBtn").click(function(){var t=Math.ceil(s($("#search").val()).length/l);if(i<t){i++;e($("#search").val())}});$(document).ready(function(){$(".download-btn").click(function(){Dialog.downloadDialog().then(t=>{o(t,soilHealths)})["catch"](t=>{console.error("Error:",t)})})});let n="";async function t(){n=await getYearRange()}t();function o(t,e){const o=`Soil Health Data ${n}`;if(t==="csv"){a(o,e)}else if(t==="xlsx"){r(o,e)}else if(t==="pdf"){c(o,e)}}function a(t,e){const o={barangay:"Barangay",fieldType:"Field Type",nitrogenContent:"Nitrogen",phosphorusContent:"Phosphorus",potassiumContent:"Potassium",pH:"pH",generalRating:"General Rating",recommendations:"Recommendations",season:"Season",monthYear:"Month Year"};const n=["barangay","fieldType","nitrogenContent","phosphorusContent","potassiumContent","pH","generalRating","recommendations","season","monthYear"];const a=n.map(t=>o[t]);let r="data:text/csv;charset=utf-8,"+a.join(",")+"\n"+e.map(e=>n.map(t=>e[t]||"").join(",")).join("\n");const s=encodeURI(r);const l=document.createElement("a");l.setAttribute("href",s);l.setAttribute("download",t);document.body.appendChild(l);l.click();document.body.removeChild(l);addDownload(t,"CSV")}function r(a,t){const n={barangay:"Barangay",fieldType:"Field Type",nitrogenContent:"Nitrogen",phosphorusContent:"Phosphorus",potassiumContent:"Potassium",pH:"pH",generalRating:"General Rating",recommendations:"Recommendations",season:"Season",monthYear:"Month Year"};const r=["barangay","fieldType","nitrogenContent","phosphorusContent","potassiumContent","pH","generalRating","recommendations","season","monthYear"];const e=r.map(t=>n[t]);const o=t.map(e=>{const o={};r.forEach(t=>{o[n[t]]=e[t]});return o});const s=new ExcelJS.Workbook;const l=s.addWorksheet(a);l.addRow(e);o.forEach(o=>{l.addRow(r.map(t=>{const e=o[n[t]];return e}))});const i={font:{name:"Calibri",size:12,bold:true,color:{argb:"FFFFFFFF"}},fill:{type:"pattern",pattern:"solid",fgColor:{argb:"203764"}},alignment:{horizontal:"center",vertical:"middle"},border:{top:{style:"thin",color:{argb:"FF000000"}},right:{style:"thin",color:{argb:"FF000000"}},bottom:{style:"thin",color:{argb:"FF000000"}},left:{style:"thin",color:{argb:"FF000000"}}}};const c={font:{name:"Calibri",size:11},alignment:{horizontal:"center",vertical:"middle",wrapText:true},border:{top:{style:"thin",color:{argb:"FF000000"}},right:{style:"thin",color:{argb:"FF000000"}},bottom:{style:"thin",color:{argb:"FF000000"}},left:{style:"thin",color:{argb:"FF000000"}}}};const d=l.getRow(1);d.eachCell({includeEmpty:true},t=>{t.style=i});d.height=20;l.eachRow({includeEmpty:true},(t,e)=>{if(e>1){t.eachCell({includeEmpty:true},t=>{t.style=c})}});l.columns=e.map(t=>({width:Math.max(t.length,10)+5}));s.xlsx.writeBuffer().then(function(t){const e=new Blob([t],{type:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"});const o=URL.createObjectURL(e);const n=document.createElement("a");n.href=o;n.download=a;n.click();URL.revokeObjectURL(o)});addDownload(a,"XLSX")}function c(t,e){const{jsPDF:o}=window.jspdf;const n=new o("landscape");const a=[...new Set(e.flatMap(Object.keys))];const r=a.filter(t=>!t.toLowerCase().includes("id"));const s=r.slice(0,r.length-2);const l=s.map(d);const i=t=>{if(typeof t==="number"){return t.toFixed(2)}return t};n.autoTable({head:[l],body:e.map(o=>s.map(t=>{let e=o[t];return i(e)})),theme:"striped"});n.save(t);addDownload(t,"PDF")}function d(t){return t.replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").split(" ").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join(" ")}getSoilHealth();e()}async function processSoilHealthData(t,n,e,o,a){var r=t.SheetNames[0];var s=t.Sheets[r];var l=getKeyBySubstring(n,"Barangay");var i=getKeyBySubstring(n,"Field Type");var c=getKeyBySubstring(n,"Nitrogen");var d=getKeyBySubstring(n,"Phosphorus");var h=getKeyBySubstring(n,"Potassium");var u=getKeyBySubstring(n,"pH");var g=getKeyBySubstring(n,"General Fertility");var p=getKeyBySubstring(n,"Recommendations");var m=XLSX.utils.decode_range(s["!ref"]);let y=[];const f=new Set(["L","ML","MH","H"]);for(var b=m.s.r+1;b<=m.e.r;b++){var v=c.charAt(0)+(b+1);var S=s[v]?s[v].v:"";var H=d.charAt(0)+(b+1);var $=s[H]?s[H].v:"";var C=h.charAt(0)+(b+1);var F=s[C]?s[C].v:"";var w=u.charAt(0)+(b+1);var B=s[w]?s[w].v:"";if(![S,$,F,B].every(t=>f.has(t))){continue}var R={};Object.keys(n).forEach(function(t){var e=n[t].charAt(0)+(b+1);var o=s[e]?s[e].v:"";R[t]=o});var T=new SoilHealth(e,getKeyBySubstring(R,"Barangay"),getKeyBySubstring(R,"Farmer"),getKeyBySubstring(R,"Field Type"),getKeyBySubstring(R,"Nitrogen"),getKeyBySubstring(R,"Phosphorus"),getKeyBySubstring(R,"Potassium"),getKeyBySubstring(R,"pH"),getKeyBySubstring(R,"General Fertility"),getKeyBySubstring(R,"Recommendations"),o,a);y.push(T)}var x=soilHealths.find(t=>t.recordId===y[0].recordId);if(x){await y[0].removeSoilHealth(y)}y[0].addSoilHealth(y);return soilHealths}function getKeyBySubstring(e,t){const o=t.trim().toLowerCase();for(let t in e){if(t.trim().toLowerCase().includes(o)){return e[t]}}return null}export{SoilHealth,getSoilHealth,soilHealths,initializeMethodsSoilHealth,processSoilHealthData};